"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmGeographicCoord import ZcmGeographicCoord

from ZcmVelocityVector import ZcmVelocityVector

from ZcmService import ZcmService

from ZcmUtmCoord import ZcmUtmCoord

class ZcmNavFilter(object):
    __slots__ = ["service", "utm_coordinates", "geographic_coordinates", "velocity_vector", "speed", "azimuth_calculated", "azimuth_measured", "x", "y", "z"]

    def __init__(self):
        self.service = ZcmService()
        self.utm_coordinates = ZcmUtmCoord()
        self.geographic_coordinates = ZcmGeographicCoord()
        self.velocity_vector = ZcmVelocityVector()
        self.speed = 0.0
        self.azimuth_calculated = 0.0
        self.azimuth_measured = 0.0
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmNavFilter._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        assert self.utm_coordinates._get_packed_fingerprint() == ZcmUtmCoord._get_packed_fingerprint()
        self.utm_coordinates._encode_one(buf)
        assert self.geographic_coordinates._get_packed_fingerprint() == ZcmGeographicCoord._get_packed_fingerprint()
        self.geographic_coordinates._encode_one(buf)
        assert self.velocity_vector._get_packed_fingerprint() == ZcmVelocityVector._get_packed_fingerprint()
        self.velocity_vector._encode_one(buf)
        buf.write(struct.pack(">dddddd", self.speed, self.azimuth_calculated, self.azimuth_measured, self.x, self.y, self.z))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmNavFilter._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmNavFilter._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmNavFilter()
        self.service = ZcmService._decode_one(buf)
        self.utm_coordinates = ZcmUtmCoord._decode_one(buf)
        self.geographic_coordinates = ZcmGeographicCoord._decode_one(buf)
        self.velocity_vector = ZcmVelocityVector._decode_one(buf)
        self.speed, self.azimuth_calculated, self.azimuth_measured, self.x, self.y, self.z = struct.unpack(">dddddd", buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmNavFilter in parents: return 0
        newparents = parents + [ZcmNavFilter]
        tmphash = (0x951f76484d783810+ ZcmService._get_hash_recursive(newparents)+ ZcmUtmCoord._get_hash_recursive(newparents)+ ZcmGeographicCoord._get_hash_recursive(newparents)+ ZcmVelocityVector._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmNavFilter._packed_fingerprint is None:
            ZcmNavFilter._packed_fingerprint = struct.pack(">Q", ZcmNavFilter._get_hash_recursive([]))
        return ZcmNavFilter._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

