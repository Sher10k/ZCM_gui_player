/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __ZcmRadarContiObjectQualityInfo_hpp__
#define __ZcmRadarContiObjectQualityInfo_hpp__

#include "ZcmService.hpp"


/**
 * @struct ZcmRadarContiObjectQualityInfo
 * @brief Содержит информацию о качестве обнаруженных объектов
 * Сообщение не обязательное, приходит только если включена опция SendQuality \n
 * ID: 0x60C 
 * @var ZcmRadarContiObjectQualityInfo::id
 * @brief - ID объекта (от 0 до 255)
 * @var ZcmRadarContiObjectQualityInfo::dist_long_rms
 * @brief - среднеквадратическое отклонение по оси X (м) не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::dist_lat_rms
 * @brief - среднеквадратическое отклонение по оси Y (м) не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::vrel_long_rms
 * @brief - среднеквадратическое отклонение относительной скорости по оси X (м/с)
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::vrel_lat_rms
 * @brief - среднеквадратическое отклонение относительной скорости по оси Y (м/с)
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::arel_lat_rms
 * @brief - среднеквадратическое отклонение относительного ускорения по оси Y (м/с) 
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::areal_long_rms
 * @brief - среднеквадратическое отклонение относительного ускорения по оси X (м/с)
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::orientation_rms
 * @brief - среднеквадратическое отклонение угла ориентации (градусы)
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::meas_state
 * @brief - состояние измерения: \n
 *                      0 - объект удален - если в следующем цикле объект с данным ID уже не существует \n
 *                      1 - новый объект \n
 *                      2 - измеренный объект \n
 *                      3 - предсказанных объект \n
 *                      4 - удален по причине объединения с другим объектом \n
 *                      5 - новый объект создан после объединения с другим объектом 
 *                      
 * @var prob_of_exist
 * @brief- вероятность существования объекта (от 0.0 до 1.0)
 *
 */
class ZcmRadarContiObjectQualityInfo
{
    public:
        ZcmService service;

        int16_t    id;

        float      dist_long_rms;

        float      vrel_long_rms;

        float      dist_lat_rms;

        float      vrel_lat_rms;

        float      arel_lat_rms;

        float      areal_long_rms;

        float      orientation_rms;

        int8_t     meas_state;

        float      prob_of_exist;

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~ZcmRadarContiObjectQualityInfo() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ZcmRadarContiObjectQualityInfo"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int ZcmRadarContiObjectQualityInfo::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmRadarContiObjectQualityInfo::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmRadarContiObjectQualityInfo::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ZcmRadarContiObjectQualityInfo::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* ZcmRadarContiObjectQualityInfo::getTypeName()
{
    return "ZcmRadarContiObjectQualityInfo";
}

int ZcmRadarContiObjectQualityInfo::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->id, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->dist_long_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->vrel_long_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->dist_lat_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->vrel_lat_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->arel_lat_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->areal_long_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->orientation_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->meas_state, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->prob_of_exist, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmRadarContiObjectQualityInfo::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->id, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->dist_long_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->vrel_long_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->dist_lat_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->vrel_lat_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->arel_lat_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->areal_long_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->orientation_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->meas_state, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->prob_of_exist, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmRadarContiObjectQualityInfo::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += this->service._getEncodedSizeNoHash();
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t ZcmRadarContiObjectQualityInfo::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == ZcmRadarContiObjectQualityInfo::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)ZcmRadarContiObjectQualityInfo::getHash };

    uint64_t hash = (uint64_t)0xf5ca165979dfdb6cLL +
         ZcmService::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
