/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __ZcmRadarContiClusterQualityInfo_hpp__
#define __ZcmRadarContiClusterQualityInfo_hpp__

#include "ZcmService.hpp"


/**
 * @struct ZcmRadarContiClusterQualityInfo
 * @brief Информация о качестве кластера
 * Сообщение не обязательно, приходит если включена опция SendQualite \n
 * ID:0x702
 * @var ZcmRadarContiClusterQualityInfo::id
 * @brief - ID кластера (от 0 до 255)
 * @var ZcmRadarContiClusterQualityInfo::dist_long_rms
 * @brief - среднеквадратическое отклонение по оси X (м) не более чем значение переменной. \n
 *                      0 - невалидное значение
 * @var ZcmRadarContiClusterQualityInfo::dist_lat_rms
 * @brief - среднеквадратическое отклонение по оси Y (м), не более чем значение переменной. \n
 *                      0 - невалидное значение
 * @var ZcmRadarContiClusterQualityInfo::vrel_long_rms
 * @brief - среднеквадратическое отклонение относительной скорости по оси X (м/с)
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 * @var ZcmRadarContiClusterQualityInfo::vrel_lat_rms
 * @brief - среднеквадратическое отклонение относительной скорости по оси Y (м/с)
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiClusterQualityInfo::pdh0
 * @brief - вероятность ложного обнаружения кластера (т.е. вероятность того что обнаруженный кластер
 *                      является шумом) (от 0.0 до 1.0), не более чем значение переменной.
 *                      
 * @var ZcmRadarContiClusterQualityInfo::invalid_state
 * @brief - валидность данных: \n 
 *                       0: Valid \n
 *                       1: Invalid due to low RCS \n
 *                       2: Invalid due to near-field artefact \n
 *                       3: Invalid far range Cluster because not confirmed in near range \n
 *                       4: Valid Cluster with low RCS \n
 *                       5: reserved \n
 *                       6: Invalid Cluster due to high mirror probability \n
 *                       7: Invalid because outside sensor field of view \n
 *                       8: Valid Cluster with azimuth correction due to elevation \n
 *                       9: Valid Cluster with high child probability \n
 *                       10: Valid Cluster with high probability of being a 50 deg artefact \n
 *                       11: Valid Cluster but no local maximum \n
 *                       12: Valid Cluster with high artefact probability \n
 *                       13: reserved \n
 *                       14: Invalid Cluster because it is a harmonics \n
 *                       15: Valid Cluster above 95 m in near range \n
 *                       16: Valid Cluster with high multi-target probability \n
 *                       17: Valid Cluster with suspicious angle  \n  
 *                                   
 * @var ZcmRadarContiClusterQualityInfo::ambig_state 
 * @brief - состояние Допплеровского решения двусмысленности \n
 *                       0: invalid \n
 *                       1: ambiguous \n
 *                       2: staggered ramp \n
 *                       3: unambiguous \n
 *                       4: stationary candidates \n
 *
 */
class ZcmRadarContiClusterQualityInfo
{
    public:
        ZcmService service;

        int16_t    id;

        float      dist_long_rms;

        float      dist_lat_rms;

        float      vrel_long_rms;

        float      vrel_lat_rms;

        float      pdh0;

        float      invalid_state;

        float      ambig_state;

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~ZcmRadarContiClusterQualityInfo() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ZcmRadarContiClusterQualityInfo"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int ZcmRadarContiClusterQualityInfo::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmRadarContiClusterQualityInfo::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmRadarContiClusterQualityInfo::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ZcmRadarContiClusterQualityInfo::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* ZcmRadarContiClusterQualityInfo::getTypeName()
{
    return "ZcmRadarContiClusterQualityInfo";
}

int ZcmRadarContiClusterQualityInfo::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->id, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->dist_long_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->dist_lat_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->vrel_long_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->vrel_lat_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->pdh0, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->invalid_state, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->ambig_state, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmRadarContiClusterQualityInfo::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->id, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->dist_long_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->dist_lat_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->vrel_long_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->vrel_lat_rms, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->pdh0, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->invalid_state, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->ambig_state, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmRadarContiClusterQualityInfo::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += this->service._getEncodedSizeNoHash();
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t ZcmRadarContiClusterQualityInfo::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == ZcmRadarContiClusterQualityInfo::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)ZcmRadarContiClusterQualityInfo::getHash };

    uint64_t hash = (uint64_t)0xad2c43b3b3d66cbbLL +
         ZcmService::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
