"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmRadarContiCluster import ZcmRadarContiCluster

from ZcmService import ZcmService

class ZcmRadarContiClustersScan(object):
    __slots__ = ["service", "scan_size", "clusters"]

    def __init__(self):
        self.service = ZcmService()
        self.scan_size = 0
        self.clusters = []

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmRadarContiClustersScan._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        buf.write(struct.pack(">h", self.scan_size))
        for i0 in range(self.scan_size):
            assert self.clusters[i0]._get_packed_fingerprint() == ZcmRadarContiCluster._get_packed_fingerprint()
            self.clusters[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmRadarContiClustersScan._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmRadarContiClustersScan._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmRadarContiClustersScan()
        self.service = ZcmService._decode_one(buf)
        self.scan_size = struct.unpack(">h", buf.read(2))[0]
        self.clusters = []
        for i0 in range(self.scan_size):
            self.clusters.append(ZcmRadarContiCluster._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmRadarContiClustersScan in parents: return 0
        newparents = parents + [ZcmRadarContiClustersScan]
        tmphash = (0x3e4c48c585f0ea97+ ZcmService._get_hash_recursive(newparents)+ ZcmRadarContiCluster._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmRadarContiClustersScan._packed_fingerprint is None:
            ZcmRadarContiClustersScan._packed_fingerprint = struct.pack(">Q", ZcmRadarContiClustersScan._get_hash_recursive([]))
        return ZcmRadarContiClustersScan._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

