"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmRadarContiObjectGeneralInfo import ZcmRadarContiObjectGeneralInfo

from ZcmRadarContiObjectExtendedInfo import ZcmRadarContiObjectExtendedInfo

from ZcmRadarContiObjectQualityInfo import ZcmRadarContiObjectQualityInfo

class ZcmRadarContiObject(object):
    __slots__ = ["id", "general", "quality", "extended"]

    def __init__(self):
        self.id = 0
        self.general = ZcmRadarContiObjectGeneralInfo()
        self.quality = ZcmRadarContiObjectQualityInfo()
        self.extended = ZcmRadarContiObjectExtendedInfo()

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmRadarContiObject._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">h", self.id))
        assert self.general._get_packed_fingerprint() == ZcmRadarContiObjectGeneralInfo._get_packed_fingerprint()
        self.general._encode_one(buf)
        assert self.quality._get_packed_fingerprint() == ZcmRadarContiObjectQualityInfo._get_packed_fingerprint()
        self.quality._encode_one(buf)
        assert self.extended._get_packed_fingerprint() == ZcmRadarContiObjectExtendedInfo._get_packed_fingerprint()
        self.extended._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmRadarContiObject._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmRadarContiObject._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmRadarContiObject()
        self.id = struct.unpack(">h", buf.read(2))[0]
        self.general = ZcmRadarContiObjectGeneralInfo._decode_one(buf)
        self.quality = ZcmRadarContiObjectQualityInfo._decode_one(buf)
        self.extended = ZcmRadarContiObjectExtendedInfo._decode_one(buf)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmRadarContiObject in parents: return 0
        newparents = parents + [ZcmRadarContiObject]
        tmphash = (0xfab290666d206f02+ ZcmRadarContiObjectGeneralInfo._get_hash_recursive(newparents)+ ZcmRadarContiObjectQualityInfo._get_hash_recursive(newparents)+ ZcmRadarContiObjectExtendedInfo._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmRadarContiObject._packed_fingerprint is None:
            ZcmRadarContiObject._packed_fingerprint = struct.pack(">Q", ZcmRadarContiObject._get_hash_recursive([]))
        return ZcmRadarContiObject._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

