// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmRadarContiObjectQualityInfo_h
#define _ZcmRadarContiObjectQualityInfo_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
/**
 * @struct ZcmRadarContiObjectQualityInfo
 * @brief Содержит информацию о качестве обнаруженных объектов
 * Сообщение не обязательное, приходит только если включена опция SendQuality \n
 * ID: 0x60C 
 * @var ZcmRadarContiObjectQualityInfo::id
 * @brief - ID объекта (от 0 до 255)
 * @var ZcmRadarContiObjectQualityInfo::dist_long_rms
 * @brief - среднеквадратическое отклонение по оси X (м) не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::dist_lat_rms
 * @brief - среднеквадратическое отклонение по оси Y (м) не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::vrel_long_rms
 * @brief - среднеквадратическое отклонение относительной скорости по оси X (м/с)
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::vrel_lat_rms
 * @brief - среднеквадратическое отклонение относительной скорости по оси Y (м/с)
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::arel_lat_rms
 * @brief - среднеквадратическое отклонение относительного ускорения по оси Y (м/с) 
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::areal_long_rms
 * @brief - среднеквадратическое отклонение относительного ускорения по оси X (м/с)
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::orientation_rms
 * @brief - среднеквадратическое отклонение угла ориентации (градусы)
 *                      не более чем значение переменной. \n
 *                      0 - невалидное значение
 *                      
 * @var ZcmRadarContiObjectQualityInfo::meas_state
 * @brief - состояние измерения: \n
 *                      0 - объект удален - если в следующем цикле объект с данным ID уже не существует \n
 *                      1 - новый объект \n
 *                      2 - измеренный объект \n
 *                      3 - предсказанных объект \n
 *                      4 - удален по причине объединения с другим объектом \n
 *                      5 - новый объект создан после объединения с другим объектом 
 *                      
 * @var prob_of_exist
 * @brief- вероятность существования объекта (от 0.0 до 1.0)
 *
 */
typedef struct _ZcmRadarContiObjectQualityInfo ZcmRadarContiObjectQualityInfo;
struct _ZcmRadarContiObjectQualityInfo
{
    ZcmService service;
    int16_t    id;
    float      dist_long_rms;
    float      vrel_long_rms;
    float      dist_lat_rms;
    float      vrel_lat_rms;
    float      arel_lat_rms;
    float      areal_long_rms;
    float      orientation_rms;
    int8_t     meas_state;
    float      prob_of_exist;
};

/**
 * Create a deep copy of a ZcmRadarContiObjectQualityInfo.
 * When no longer needed, destroy it with ZcmRadarContiObjectQualityInfo_destroy()
 */
ZcmRadarContiObjectQualityInfo* ZcmRadarContiObjectQualityInfo_copy(const ZcmRadarContiObjectQualityInfo* to_copy);

/**
 * Destroy an instance of ZcmRadarContiObjectQualityInfo created by ZcmRadarContiObjectQualityInfo_copy()
 */
void ZcmRadarContiObjectQualityInfo_destroy(ZcmRadarContiObjectQualityInfo* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmRadarContiObjectQualityInfo_subscription_t ZcmRadarContiObjectQualityInfo_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmRadarContiObjectQualityInfo is received.
 */
typedef void(*ZcmRadarContiObjectQualityInfo_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmRadarContiObjectQualityInfo* msg, void* userdata);

/**
 * Publish a message of type ZcmRadarContiObjectQualityInfo using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmRadarContiObjectQualityInfo_publish(zcm_t* zcm, const char* channel, const ZcmRadarContiObjectQualityInfo* msg);

/**
 * Subscribe to messages of type ZcmRadarContiObjectQualityInfo using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmRadarContiObjectQualityInfo_unsubscribe.
 */
ZcmRadarContiObjectQualityInfo_subscription_t* ZcmRadarContiObjectQualityInfo_subscribe(zcm_t* zcm, const char* channel, ZcmRadarContiObjectQualityInfo_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmRadarContiObjectQualityInfo_subscribe()
 */
int ZcmRadarContiObjectQualityInfo_unsubscribe(zcm_t* zcm, ZcmRadarContiObjectQualityInfo_subscription_t* hid);
/**
 * Encode a message of type ZcmRadarContiObjectQualityInfo into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmRadarContiObjectQualityInfo_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmRadarContiObjectQualityInfo_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmRadarContiObjectQualityInfo* p);

/**
 * Decode a message of type ZcmRadarContiObjectQualityInfo from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmRadarContiObjectQualityInfo_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmRadarContiObjectQualityInfo_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmRadarContiObjectQualityInfo* msg);

/**
 * Release resources allocated by ZcmRadarContiObjectQualityInfo_decode()
 * @return 0
 */
int ZcmRadarContiObjectQualityInfo_decode_cleanup(ZcmRadarContiObjectQualityInfo* p);

/**
 * Check how many bytes are required to encode a message of type ZcmRadarContiObjectQualityInfo
 */
uint32_t ZcmRadarContiObjectQualityInfo_encoded_size(const ZcmRadarContiObjectQualityInfo* p);
uint32_t ZcmRadarContiObjectQualityInfo_struct_size(void);
uint32_t ZcmRadarContiObjectQualityInfo_num_fields(void);
int      ZcmRadarContiObjectQualityInfo_get_field(const ZcmRadarContiObjectQualityInfo* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmRadarContiObjectQualityInfo_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmRadarContiObjectQualityInfo_get_hash(void);
uint64_t __ZcmRadarContiObjectQualityInfo_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmRadarContiObjectQualityInfo_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmRadarContiObjectQualityInfo* p, uint32_t elements);
int      __ZcmRadarContiObjectQualityInfo_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmRadarContiObjectQualityInfo* p, uint32_t elements);
int      __ZcmRadarContiObjectQualityInfo_decode_array_cleanup(ZcmRadarContiObjectQualityInfo* p, uint32_t elements);
uint32_t __ZcmRadarContiObjectQualityInfo_encoded_array_size(const ZcmRadarContiObjectQualityInfo* p, uint32_t elements);
uint32_t __ZcmRadarContiObjectQualityInfo_clone_array(const ZcmRadarContiObjectQualityInfo* p, ZcmRadarContiObjectQualityInfo* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
