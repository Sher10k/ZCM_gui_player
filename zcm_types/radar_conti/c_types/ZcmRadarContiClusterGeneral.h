// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmRadarContiClusterGeneral_h
#define _ZcmRadarContiClusterGeneral_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
/**
 * @struct ZcmRadarContiClusterGeneral
 * @brief Содержит информацию о позиции и скорости обнаруженного кластера.
 * Если за одно сканирование было обнаружено больше 250 кластеров,  
 * то только первые 250 будут получены. \n
 * ID:0x701
 * @var ZcmRadarContiClusterGeneral::id        
 * @brief - ID кластера (от 0 до 255)
 * @var ZcmRadarContiClusterGeneral::dist_long  
 * @brief - координата по оси X (м) (от -500 до 1138.2)
 * @var ZcmRadarContiClusterGeneral::dist_lat
 * @brief - координата по оси Y (м) (от -102.3 до 102.3)
 * @var ZcmRadarContiClusterGeneral::vrel_long
 * @brief - относительная скорость по оси X (м/с) (от -128 до 127.75)
 * @var ZcmRadarContiClusterGeneral::dyn_prop
 * @brief - Динамическая характеристика объекта: \n
 *                  0 - moving \n
 *                  1 - stationary \n
 *                  2 - oncoming \n
 *                  3 - stationary candidate \n
 *                  4 - unknown \n
 *                  5 - crossing stationary \n
 *                  6 - crossing moving \n
 *                  7 - stopped \n
 *                  
 * @var ZcmRadarContiClusterGeneral::vrel_lat 
 * @brief - относительная скорость по оси Y (м/с) (от -64 до 63.75)
 * @var ZcmRadarContiClusterGeneral::rcs
 * @brief - эффективная площадь отражения (dBm2)  (от -64 до 63.5)
 *
 */
typedef struct _ZcmRadarContiClusterGeneral ZcmRadarContiClusterGeneral;
struct _ZcmRadarContiClusterGeneral
{
    ZcmService service;
    int16_t    id;
    float      dist_long;
    float      dist_lat;
    float      vrel_long;
    int8_t     dyn_prop;
    float      vrel_lat;
    float      rcs;
};

/**
 * Create a deep copy of a ZcmRadarContiClusterGeneral.
 * When no longer needed, destroy it with ZcmRadarContiClusterGeneral_destroy()
 */
ZcmRadarContiClusterGeneral* ZcmRadarContiClusterGeneral_copy(const ZcmRadarContiClusterGeneral* to_copy);

/**
 * Destroy an instance of ZcmRadarContiClusterGeneral created by ZcmRadarContiClusterGeneral_copy()
 */
void ZcmRadarContiClusterGeneral_destroy(ZcmRadarContiClusterGeneral* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmRadarContiClusterGeneral_subscription_t ZcmRadarContiClusterGeneral_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmRadarContiClusterGeneral is received.
 */
typedef void(*ZcmRadarContiClusterGeneral_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmRadarContiClusterGeneral* msg, void* userdata);

/**
 * Publish a message of type ZcmRadarContiClusterGeneral using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmRadarContiClusterGeneral_publish(zcm_t* zcm, const char* channel, const ZcmRadarContiClusterGeneral* msg);

/**
 * Subscribe to messages of type ZcmRadarContiClusterGeneral using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmRadarContiClusterGeneral_unsubscribe.
 */
ZcmRadarContiClusterGeneral_subscription_t* ZcmRadarContiClusterGeneral_subscribe(zcm_t* zcm, const char* channel, ZcmRadarContiClusterGeneral_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmRadarContiClusterGeneral_subscribe()
 */
int ZcmRadarContiClusterGeneral_unsubscribe(zcm_t* zcm, ZcmRadarContiClusterGeneral_subscription_t* hid);
/**
 * Encode a message of type ZcmRadarContiClusterGeneral into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmRadarContiClusterGeneral_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmRadarContiClusterGeneral_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmRadarContiClusterGeneral* p);

/**
 * Decode a message of type ZcmRadarContiClusterGeneral from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmRadarContiClusterGeneral_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmRadarContiClusterGeneral_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmRadarContiClusterGeneral* msg);

/**
 * Release resources allocated by ZcmRadarContiClusterGeneral_decode()
 * @return 0
 */
int ZcmRadarContiClusterGeneral_decode_cleanup(ZcmRadarContiClusterGeneral* p);

/**
 * Check how many bytes are required to encode a message of type ZcmRadarContiClusterGeneral
 */
uint32_t ZcmRadarContiClusterGeneral_encoded_size(const ZcmRadarContiClusterGeneral* p);
uint32_t ZcmRadarContiClusterGeneral_struct_size(void);
uint32_t ZcmRadarContiClusterGeneral_num_fields(void);
int      ZcmRadarContiClusterGeneral_get_field(const ZcmRadarContiClusterGeneral* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmRadarContiClusterGeneral_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmRadarContiClusterGeneral_get_hash(void);
uint64_t __ZcmRadarContiClusterGeneral_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmRadarContiClusterGeneral_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmRadarContiClusterGeneral* p, uint32_t elements);
int      __ZcmRadarContiClusterGeneral_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmRadarContiClusterGeneral* p, uint32_t elements);
int      __ZcmRadarContiClusterGeneral_decode_array_cleanup(ZcmRadarContiClusterGeneral* p, uint32_t elements);
uint32_t __ZcmRadarContiClusterGeneral_encoded_array_size(const ZcmRadarContiClusterGeneral* p, uint32_t elements);
uint32_t __ZcmRadarContiClusterGeneral_clone_array(const ZcmRadarContiClusterGeneral* p, ZcmRadarContiClusterGeneral* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
