// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmRadarContiClusterListStatus_h
#define _ZcmRadarContiClusterListStatus_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
/**
 * @mainpage Сообщения от радара
 * Данный документ содержит описание сообщений для работы
 * с радаром Continental.
 *
 * @struct ZcmRadarContiClusterListStatus
 * @brief Первое сообщение в цикле измерения(сканирования) в режиме кластеров.
 * Содержит информацию об одном сканировании. \n
 * ID:0x600
 * @var ZcmRadarContiClusterListStatus::number_cluster_near
 * @brief - количество обнаруженных кластеров в ближней зоне. 
 *          Количество от 0 до 255.
 *          
 * @var ZcmRadarContiClusterListStatus::number_cluster_far  
 * @brief - количество обнаруженных кластеров в дальней зоне. 
 *          Количество от 0 до 255.
 *          
 * @var ZcmRadarContiClusterListStatus::meas_count         
 * @brief - счетчик измерений ( от 0 до 65535, при переполнении начинается с 0)
 * @var ZcmRadarContiClusterListStatus::interface_version
 * @brief - версия интерфейса CAN ( от 0 до 15)                 
 *
 */
typedef struct _ZcmRadarContiClusterListStatus ZcmRadarContiClusterListStatus;
struct _ZcmRadarContiClusterListStatus
{
    ZcmService service;
    int16_t    number_cluster_near;
    int16_t    number_cluster_far;
    int32_t    meas_count;
    int8_t     interface_version;
};

/**
 * Create a deep copy of a ZcmRadarContiClusterListStatus.
 * When no longer needed, destroy it with ZcmRadarContiClusterListStatus_destroy()
 */
ZcmRadarContiClusterListStatus* ZcmRadarContiClusterListStatus_copy(const ZcmRadarContiClusterListStatus* to_copy);

/**
 * Destroy an instance of ZcmRadarContiClusterListStatus created by ZcmRadarContiClusterListStatus_copy()
 */
void ZcmRadarContiClusterListStatus_destroy(ZcmRadarContiClusterListStatus* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmRadarContiClusterListStatus_subscription_t ZcmRadarContiClusterListStatus_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmRadarContiClusterListStatus is received.
 */
typedef void(*ZcmRadarContiClusterListStatus_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmRadarContiClusterListStatus* msg, void* userdata);

/**
 * Publish a message of type ZcmRadarContiClusterListStatus using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmRadarContiClusterListStatus_publish(zcm_t* zcm, const char* channel, const ZcmRadarContiClusterListStatus* msg);

/**
 * Subscribe to messages of type ZcmRadarContiClusterListStatus using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmRadarContiClusterListStatus_unsubscribe.
 */
ZcmRadarContiClusterListStatus_subscription_t* ZcmRadarContiClusterListStatus_subscribe(zcm_t* zcm, const char* channel, ZcmRadarContiClusterListStatus_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmRadarContiClusterListStatus_subscribe()
 */
int ZcmRadarContiClusterListStatus_unsubscribe(zcm_t* zcm, ZcmRadarContiClusterListStatus_subscription_t* hid);
/**
 * Encode a message of type ZcmRadarContiClusterListStatus into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmRadarContiClusterListStatus_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmRadarContiClusterListStatus_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmRadarContiClusterListStatus* p);

/**
 * Decode a message of type ZcmRadarContiClusterListStatus from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmRadarContiClusterListStatus_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmRadarContiClusterListStatus_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmRadarContiClusterListStatus* msg);

/**
 * Release resources allocated by ZcmRadarContiClusterListStatus_decode()
 * @return 0
 */
int ZcmRadarContiClusterListStatus_decode_cleanup(ZcmRadarContiClusterListStatus* p);

/**
 * Check how many bytes are required to encode a message of type ZcmRadarContiClusterListStatus
 */
uint32_t ZcmRadarContiClusterListStatus_encoded_size(const ZcmRadarContiClusterListStatus* p);
uint32_t ZcmRadarContiClusterListStatus_struct_size(void);
uint32_t ZcmRadarContiClusterListStatus_num_fields(void);
int      ZcmRadarContiClusterListStatus_get_field(const ZcmRadarContiClusterListStatus* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmRadarContiClusterListStatus_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmRadarContiClusterListStatus_get_hash(void);
uint64_t __ZcmRadarContiClusterListStatus_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmRadarContiClusterListStatus_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmRadarContiClusterListStatus* p, uint32_t elements);
int      __ZcmRadarContiClusterListStatus_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmRadarContiClusterListStatus* p, uint32_t elements);
int      __ZcmRadarContiClusterListStatus_decode_array_cleanup(ZcmRadarContiClusterListStatus* p, uint32_t elements);
uint32_t __ZcmRadarContiClusterListStatus_encoded_array_size(const ZcmRadarContiClusterListStatus* p, uint32_t elements);
uint32_t __ZcmRadarContiClusterListStatus_clone_array(const ZcmRadarContiClusterListStatus* p, ZcmRadarContiClusterListStatus* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
