// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmRadarContiObjectExtendedInfo_h
#define _ZcmRadarContiObjectExtendedInfo_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
/**
 * @struct ZcmRadarContiObjectExtendedInfo
 * @brief Расширенная информация об объекте
 * Сообщение не обязательное, приходит если включена опция SendExtInfo \n
 * ID: 0x60D
 * @var ZcmRadarContiObjectExtendedInfo::id 
 * @brief - ID объекта (от 0 до 255)
 * @var ZcmRadarContiObjectExtendedInfo::arel_long
 * @brief - относительное ускорение по оси X (м/с2)
 * @var ZcmRadarContiObjectExtendedInfo::arel_lat
 * @brief - относительное ускорение по оси Y (м/с2)
 * @var ZcmRadarContiObjectExtendedInfo::obj_class
 * @brief - класс объекта: \n
 *                         0: point \n
 *                         1: car \n
 *                         2: truck \n
 *                         3: pedestrian \n
 *                         4: motorcycle \n
 *                         5: bicycle \n
 *                         6: wide \n
 * @var ZcmRadarContiObjectExtendedInfo::orientation_angel
 * @brief - угол ориентации объекта (от -180.0 до 180.0) (градусы)
 * @var ZcmRadarContiObjectExtendedInfo::obj_len
 * @brief - длина объекта (от 0 до 51) (м)
 * @var ZcmRadarContiObjectExtendedInfo::obj_width
 * @brief - ширина объекта (от 0 до 51) (м)
 *
 */
typedef struct _ZcmRadarContiObjectExtendedInfo ZcmRadarContiObjectExtendedInfo;
struct _ZcmRadarContiObjectExtendedInfo
{
    ZcmService service;
    int16_t    id;
    float      arel_long;
    float      arel_lat;
    int8_t     obj_class;
    float      orientation_angel;
    float      obj_len;
    float      obj_width;
};

/**
 * Create a deep copy of a ZcmRadarContiObjectExtendedInfo.
 * When no longer needed, destroy it with ZcmRadarContiObjectExtendedInfo_destroy()
 */
ZcmRadarContiObjectExtendedInfo* ZcmRadarContiObjectExtendedInfo_copy(const ZcmRadarContiObjectExtendedInfo* to_copy);

/**
 * Destroy an instance of ZcmRadarContiObjectExtendedInfo created by ZcmRadarContiObjectExtendedInfo_copy()
 */
void ZcmRadarContiObjectExtendedInfo_destroy(ZcmRadarContiObjectExtendedInfo* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmRadarContiObjectExtendedInfo_subscription_t ZcmRadarContiObjectExtendedInfo_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmRadarContiObjectExtendedInfo is received.
 */
typedef void(*ZcmRadarContiObjectExtendedInfo_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmRadarContiObjectExtendedInfo* msg, void* userdata);

/**
 * Publish a message of type ZcmRadarContiObjectExtendedInfo using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmRadarContiObjectExtendedInfo_publish(zcm_t* zcm, const char* channel, const ZcmRadarContiObjectExtendedInfo* msg);

/**
 * Subscribe to messages of type ZcmRadarContiObjectExtendedInfo using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmRadarContiObjectExtendedInfo_unsubscribe.
 */
ZcmRadarContiObjectExtendedInfo_subscription_t* ZcmRadarContiObjectExtendedInfo_subscribe(zcm_t* zcm, const char* channel, ZcmRadarContiObjectExtendedInfo_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmRadarContiObjectExtendedInfo_subscribe()
 */
int ZcmRadarContiObjectExtendedInfo_unsubscribe(zcm_t* zcm, ZcmRadarContiObjectExtendedInfo_subscription_t* hid);
/**
 * Encode a message of type ZcmRadarContiObjectExtendedInfo into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmRadarContiObjectExtendedInfo_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmRadarContiObjectExtendedInfo_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmRadarContiObjectExtendedInfo* p);

/**
 * Decode a message of type ZcmRadarContiObjectExtendedInfo from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmRadarContiObjectExtendedInfo_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmRadarContiObjectExtendedInfo_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmRadarContiObjectExtendedInfo* msg);

/**
 * Release resources allocated by ZcmRadarContiObjectExtendedInfo_decode()
 * @return 0
 */
int ZcmRadarContiObjectExtendedInfo_decode_cleanup(ZcmRadarContiObjectExtendedInfo* p);

/**
 * Check how many bytes are required to encode a message of type ZcmRadarContiObjectExtendedInfo
 */
uint32_t ZcmRadarContiObjectExtendedInfo_encoded_size(const ZcmRadarContiObjectExtendedInfo* p);
uint32_t ZcmRadarContiObjectExtendedInfo_struct_size(void);
uint32_t ZcmRadarContiObjectExtendedInfo_num_fields(void);
int      ZcmRadarContiObjectExtendedInfo_get_field(const ZcmRadarContiObjectExtendedInfo* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmRadarContiObjectExtendedInfo_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmRadarContiObjectExtendedInfo_get_hash(void);
uint64_t __ZcmRadarContiObjectExtendedInfo_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmRadarContiObjectExtendedInfo_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmRadarContiObjectExtendedInfo* p, uint32_t elements);
int      __ZcmRadarContiObjectExtendedInfo_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmRadarContiObjectExtendedInfo* p, uint32_t elements);
int      __ZcmRadarContiObjectExtendedInfo_decode_array_cleanup(ZcmRadarContiObjectExtendedInfo* p, uint32_t elements);
uint32_t __ZcmRadarContiObjectExtendedInfo_encoded_array_size(const ZcmRadarContiObjectExtendedInfo* p, uint32_t elements);
uint32_t __ZcmRadarContiObjectExtendedInfo_clone_array(const ZcmRadarContiObjectExtendedInfo* p, ZcmRadarContiObjectExtendedInfo* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
