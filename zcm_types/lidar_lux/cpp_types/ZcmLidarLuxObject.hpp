/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __ZcmLidarLuxObject_hpp__
#define __ZcmLidarLuxObject_hpp__

#include <vector>
#include "ZcmLidarLux2DPoint.hpp"
#include "ZcmLidarLux2DPoint.hpp"
#include "ZcmLidarLux2DPoint.hpp"
#include "ZcmLidarLux2DPoint.hpp"
#include "ZcmLidarLux2DPoint.hpp"
#include "ZcmLidarLux2DPoint.hpp"
#include "ZcmLidarLux2DPoint.hpp"
#include "ZcmLidarLux2DPoint.hpp"


/**
 * @struct ZcmLidarLuxObject
 * @brief Сообщение содержит информацию об объекте
 * @var ZcmLidarLuxObject::objectId
 * @brief - уникальный идентификатор объекта
 * @var ZcmLidarLuxObject::age
 * @brief - количество сканирований на протяжении которых данный объект отслеживается
 * @var ZcmLidarLuxObject::predictionAge
 * @brief - количество сканирований на протяжении которых данный объект был предсказан, \n
 *          без новых измерений данного объекта. Как только будет получено новое измерение \n
 *          значение predictionAge станет равно 0
 * @var ZcmLidarLuxObject::relativeTimestamp
 * @brief - время с момента начала измерения (мс)
 * @var ZcmLidarLuxObject::refPoint
 * @brief - базовая точка отслеживаемого объекта (м)
 * @var ZcmLidarLuxObject::refPointSigma
 * @brief - погрешность значений базовой точки (м)
 * @var ZcmLidarLuxObject::closestPoint
 * @brief - ближайшая точка объекта (м)
 * @var ZcmLidarLuxObject::boundingBoxCenter
 * @brief - 
 * @var ZcmLidarLuxObject::boundingBoxWidth
 * @brief - 
 * @var ZcmLidarLuxObject::boundingBoxLength
 * @brief - 
 * @var ZcmLidarLuxObject::objectBoxCenter
 * @brief - координата центра объекта (м)
 * @var ZcmLidarLuxObject::objectBoxSizeX
 * @brief - размер объекта по оси X (м)
 * @var ZcmLidarLuxObject::objectBoxSizeY
 * @brief - размер объекта по оси Y (м)
 * @var ZcmLidarLuxObject::objectBoxOrientation
 * @brief - угол поворота объекта (градусы)
 * @var ZcmLidarLuxObject::absVelocity
 * @brief - абсолютное значение скорости по X и Y (м/c)
 * @var ZcmLidarLuxObject::absVelSigmaX
 * @brief - погрешность абсолютного значения скорости по X (м/c)
 * @var ZcmLidarLuxObject::absVelSigmaY
 * @brief - погрешность абсолютного значения скорости по Y (м/c)
 * @var ZcmLidarLuxObject::relVelocity
 * @brief - относительная скорость по оси X и Y (м/с)
 * @var ZcmLidarLuxObject::objectClass
 * @brief - классификация объекта
 * 					0  - Unclassified   \n
 * 					1  - UnknownSmall   \n
 * 					2  - UnknownBig     \n
 * 					3  - Pedestrian    \n
 * 					4  - Bike           \n
 * 					5  - Car            \n
 * 					6  - Truck          \n
 * 					12 - Bicycle        \n
 * @var ZcmLidarLuxObject::classAge
 * @brief - количество сканирований на протяжении которых данный объект относится к этому классу
 * @var ZcmLidarLuxObject::classCertainty
 * @brief - чем выше данное значение, тем вероятнее объект относиться к определенному классу
 * @var ZcmLidarLuxObject::numContourPoints
 * @brief - количество точек контура объекта
 * @var ZcmLidarLuxObject::numContourPointsIsValid
 * @brief - true если numContourPoints содержит валидное значение
 * @var ZcmLidarLuxObject::contourPoints
 * @brief - точки контура объекта
 *
 */
class ZcmLidarLuxObject
{
    public:
        int64_t    objectId;

        int32_t    age;

        int32_t    predictionAge;

        int32_t    relativeTimestamp;

        ZcmLidarLux2DPoint refPoint;

        ZcmLidarLux2DPoint refPointSigma;

        ZcmLidarLux2DPoint closestPoint;

        ZcmLidarLux2DPoint boundingBoxCenter;

        int32_t    boundingBoxWidth;

        int32_t    boundingBoxLength;

        ZcmLidarLux2DPoint objectBoxCenter;

        int32_t    objectBoxSizeX;

        int32_t    objectBoxSizeY;

        int16_t    objectBoxOrientation;

        ZcmLidarLux2DPoint absVelocity;

        int32_t    absVelSigmaX;

        int32_t    absVelSigmaY;

        ZcmLidarLux2DPoint relVelocity;

        int8_t     objectClass;

        int32_t    classAge;

        int32_t    classCertainty;

        int32_t    numContourPoints;

        int8_t     numContourPointsIsValid;

        std::vector< ZcmLidarLux2DPoint > contourPoints;

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~ZcmLidarLuxObject() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ZcmLidarLuxObject"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int ZcmLidarLuxObject::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmLidarLuxObject::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmLidarLuxObject::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ZcmLidarLuxObject::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* ZcmLidarLuxObject::getTypeName()
{
    return "ZcmLidarLuxObject";
}

int ZcmLidarLuxObject::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->objectId, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->age, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->predictionAge, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->relativeTimestamp, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->refPoint._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->refPointSigma._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->closestPoint._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->boundingBoxCenter._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->boundingBoxWidth, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->boundingBoxLength, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->objectBoxCenter._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->objectBoxOrientation, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->absVelocity._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->absVelSigmaX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->absVelSigmaY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->relVelocity._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->objectClass, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->classAge, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->classCertainty, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->numContourPoints, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->numContourPointsIsValid, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->numContourPoints; ++a0) {
        thislen = this->contourPoints[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    return pos;
}

int ZcmLidarLuxObject::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->objectId, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->age, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->predictionAge, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->relativeTimestamp, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->refPoint._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->refPointSigma._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->closestPoint._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->boundingBoxCenter._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->boundingBoxWidth, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->boundingBoxLength, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->objectBoxCenter._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->objectBoxSizeY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->objectBoxOrientation, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->absVelocity._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->absVelSigmaX, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->absVelSigmaY, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->relVelocity._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->objectClass, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->classAge, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->classCertainty, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->numContourPoints, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->numContourPointsIsValid, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->contourPoints.resize(this->numContourPoints);
    for (int a0 = 0; a0 < this->numContourPoints; ++a0) {
        thislen = this->contourPoints[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    return pos;
}

uint32_t ZcmLidarLuxObject::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->refPoint._getEncodedSizeNoHash();
    enc_size += this->refPointSigma._getEncodedSizeNoHash();
    enc_size += this->closestPoint._getEncodedSizeNoHash();
    enc_size += this->boundingBoxCenter._getEncodedSizeNoHash();
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->objectBoxCenter._getEncodedSizeNoHash();
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += this->absVelocity._getEncodedSizeNoHash();
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += this->relVelocity._getEncodedSizeNoHash();
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->numContourPoints; ++a0) {
        enc_size += this->contourPoints[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t ZcmLidarLuxObject::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == ZcmLidarLuxObject::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)ZcmLidarLuxObject::getHash };

    uint64_t hash = (uint64_t)0x23d1188e545f0b8dLL +
         ZcmLidarLux2DPoint::_computeHash(&cp) +
         ZcmLidarLux2DPoint::_computeHash(&cp) +
         ZcmLidarLux2DPoint::_computeHash(&cp) +
         ZcmLidarLux2DPoint::_computeHash(&cp) +
         ZcmLidarLux2DPoint::_computeHash(&cp) +
         ZcmLidarLux2DPoint::_computeHash(&cp) +
         ZcmLidarLux2DPoint::_computeHash(&cp) +
         ZcmLidarLux2DPoint::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
