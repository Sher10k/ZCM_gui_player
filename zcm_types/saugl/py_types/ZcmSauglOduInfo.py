"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmSauglOduCommand import ZcmSauglOduCommand

from ZcmService import ZcmService

from ZcmSauglOduCar import ZcmSauglOduCar

from ZcmSauglOduObstacle import ZcmSauglOduObstacle

class ZcmSauglOduInfo(object):
    __slots__ = ["service", "is_valid", "obstacle", "car", "command", "counter"]

    def __init__(self):
        self.service = ZcmService()
        self.is_valid = False
        self.obstacle = ZcmSauglOduObstacle()
        self.car = ZcmSauglOduCar()
        self.command = ZcmSauglOduCommand()
        self.counter = 0

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmSauglOduInfo._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        buf.write(struct.pack(">b", self.is_valid))
        assert self.obstacle._get_packed_fingerprint() == ZcmSauglOduObstacle._get_packed_fingerprint()
        self.obstacle._encode_one(buf)
        assert self.car._get_packed_fingerprint() == ZcmSauglOduCar._get_packed_fingerprint()
        self.car._encode_one(buf)
        assert self.command._get_packed_fingerprint() == ZcmSauglOduCommand._get_packed_fingerprint()
        self.command._encode_one(buf)
        buf.write(struct.pack(">h", self.counter))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmSauglOduInfo._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmSauglOduInfo._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmSauglOduInfo()
        self.service = ZcmService._decode_one(buf)
        self.is_valid = bool(struct.unpack('b', buf.read(1))[0])
        self.obstacle = ZcmSauglOduObstacle._decode_one(buf)
        self.car = ZcmSauglOduCar._decode_one(buf)
        self.command = ZcmSauglOduCommand._decode_one(buf)
        self.counter = struct.unpack(">h", buf.read(2))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmSauglOduInfo in parents: return 0
        newparents = parents + [ZcmSauglOduInfo]
        tmphash = (0x275609c94fe0eb54+ ZcmService._get_hash_recursive(newparents)+ ZcmSauglOduObstacle._get_hash_recursive(newparents)+ ZcmSauglOduCar._get_hash_recursive(newparents)+ ZcmSauglOduCommand._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmSauglOduInfo._packed_fingerprint is None:
            ZcmSauglOduInfo._packed_fingerprint = struct.pack(">Q", ZcmSauglOduInfo._get_hash_recursive([]))
        return ZcmSauglOduInfo._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

