"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmService import ZcmService

class ZcmSauglState(object):
    __slots__ = ["service", "power", "brake", "reversor", "mode", "mals_operation", "pressure", "speed", "hold_speed"]

    REVERSOR_NEUTRAL = 0
    REVERSOR_FORWARD = 1
    REVERSOR_BACKWARD = 2
    MODE_HAND = 0
    MODE_DISTANCE = 1
    MODE_AUTO_MALS = 2
    MODE_AUTO_MSR32 = 3
    MODE_AUTO_WAIT_SWITCH = 4
    MODE_AUTO_WAIT_HAND = 5
    MALS_OPERATION_STANDBY = 0
    MALS_OPERATION_ROUTE = 1
    MALS_OPERATION_OCCUPIED_TRACK = 2
    MALS_OPERATION_WAIT_CONNECT = 3
    MALS_OPERATION_EXTEND_CONNECT = 4

    def __init__(self):
        self.service = ZcmService()
        self.power = 0
        self.brake = 0
        self.reversor = 0
        self.mode = 0
        self.mals_operation = 0
        self.pressure = 0
        self.speed = 0
        self.hold_speed = 0

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmSauglState._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        buf.write(struct.pack(">bhbbbhhh", self.power, self.brake, self.reversor, self.mode, self.mals_operation, self.pressure, self.speed, self.hold_speed))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmSauglState._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmSauglState._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmSauglState()
        self.service = ZcmService._decode_one(buf)
        self.power, self.brake, self.reversor, self.mode, self.mals_operation, self.pressure, self.speed, self.hold_speed = struct.unpack(">bhbbbhhh", buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmSauglState in parents: return 0
        newparents = parents + [ZcmSauglState]
        tmphash = (0x1cb213138e185178+ ZcmService._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmSauglState._packed_fingerprint is None:
            ZcmSauglState._packed_fingerprint = struct.pack(">Q", ZcmSauglState._get_hash_recursive([]))
        return ZcmSauglState._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

