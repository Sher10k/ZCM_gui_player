"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmService import ZcmService

class ZcmSauglMssduInfo(object):
    __slots__ = ["service", "is_valid", "is_control", "power", "brake", "reversor", "command_diesel", "is_signal", "is_sand", "is_autocoupler_off", "hold_speed", "counter"]

    COMMAND_DIESEL_NONE = 0
    COMMAND_DIESEL_START = 1
    COMMAND_DIESEL_STOP = 2
    HOLD_SPEED_NONE = 0x00ff
    HOLD_SPEED_CURRENT = 0x00fe

    def __init__(self):
        self.service = ZcmService()
        self.is_valid = False
        self.is_control = False
        self.power = 0
        self.brake = 0
        self.reversor = 0
        self.command_diesel = 0
        self.is_signal = False
        self.is_sand = False
        self.is_autocoupler_off = False
        self.hold_speed = 0
        self.counter = 0

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmSauglMssduInfo._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        buf.write(struct.pack(">bbbhbbbbbhh", self.is_valid, self.is_control, self.power, self.brake, self.reversor, self.command_diesel, self.is_signal, self.is_sand, self.is_autocoupler_off, self.hold_speed, self.counter))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmSauglMssduInfo._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmSauglMssduInfo._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmSauglMssduInfo()
        self.service = ZcmService._decode_one(buf)
        self.is_valid = bool(struct.unpack('b', buf.read(1))[0])
        self.is_control = bool(struct.unpack('b', buf.read(1))[0])
        self.power, self.brake, self.reversor, self.command_diesel = struct.unpack(">bhbb", buf.read(5))
        self.is_signal = bool(struct.unpack('b', buf.read(1))[0])
        self.is_sand = bool(struct.unpack('b', buf.read(1))[0])
        self.is_autocoupler_off = bool(struct.unpack('b', buf.read(1))[0])
        self.hold_speed, self.counter = struct.unpack(">hh", buf.read(4))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmSauglMssduInfo in parents: return 0
        newparents = parents + [ZcmSauglMssduInfo]
        tmphash = (0xa38e475288cde785+ ZcmService._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmSauglMssduInfo._packed_fingerprint is None:
            ZcmSauglMssduInfo._packed_fingerprint = struct.pack(">Q", ZcmSauglMssduInfo._get_hash_recursive([]))
        return ZcmSauglMssduInfo._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

