// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmSauglState_h
#define _ZcmSauglState_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
#define ZCMSAUGLSTATE_REVERSOR_NEUTRAL 0
#define ZCMSAUGLSTATE_REVERSOR_FORWARD 1
#define ZCMSAUGLSTATE_REVERSOR_BACKWARD 2
#define ZCMSAUGLSTATE_MODE_HAND 0
#define ZCMSAUGLSTATE_MODE_DISTANCE 1
#define ZCMSAUGLSTATE_MODE_AUTO_MALS 2
#define ZCMSAUGLSTATE_MODE_AUTO_MSR32 3
#define ZCMSAUGLSTATE_MODE_AUTO_WAIT_SWITCH 4
#define ZCMSAUGLSTATE_MODE_AUTO_WAIT_HAND 5
#define ZCMSAUGLSTATE_MALS_OPERATION_STANDBY 0
#define ZCMSAUGLSTATE_MALS_OPERATION_ROUTE 1
#define ZCMSAUGLSTATE_MALS_OPERATION_OCCUPIED_TRACK 2
#define ZCMSAUGLSTATE_MALS_OPERATION_WAIT_CONNECT 3
#define ZCMSAUGLSTATE_MALS_OPERATION_EXTEND_CONNECT 4

/**
 * @struct ZcmSauglState
 * @brief Состояние САУ-ГЛ
 * @var ZcmSauglState::power
 * @brief - Значение контроллера тяги, от -128 до 127
 * @var ZcmSauglState::brake
 * @brief - Значение позиции тормоза, от 0 до 4
 * @var ZcmSauglState::reversor
 * @brief - Фактическое положение реверсора
 * @var ZcmSauglState::mode
 * @brief - Режим управления
 * @var ZcmSauglState::mals_operation
 * @brief - Выполняемая операция МАЛС
 * @var ZcmSauglState::pressure
 * @brief - Давление в ТЦ, мПа* 100
 * @var ZcmSauglState::speed
 * @brief - Фактическая скорость, км/ч
 * @var ZcmSauglState::hold_speed
 * @brief - Поддерживаемая скорость, км/ч
 * @var ZcmSauglState::REVERSOR_NEUTRAL
 * @brief - Константа: Положение реверсора - нейтраль
 * @var ZcmSauglState::REVERSOR_FORWARD
 * @brief - Константа: Положение реверсора - вперед
 * @var ZcmSauglState::REVERSOR_BACKWARD
 * @brief - Константа: Положение реверсора - назад
 * @var ZcmSauglState::MODE_HAND
 * @brief - Константа: Режим управления - ручной (из кабины)
 * @var ZcmSauglState::MODE_DISTANCE
 * @brief - Константа: Режим управления - дистанционный
 * @var ZcmSauglState::MODE_AUTO_MALS
 * @brief - Константа: Режим управления - автоматический (МАЛС)
 * @var ZcmSauglState::MODE_AUTO_MSR32
 * @brief - Константа: Режим управления - автоматический (MSR-32)
 * @var ZcmSauglState::MODE_AUTO_WAIT_SWITCH
 * @brief - Константа: Режим управления - автоматический (ожидание переключения управляющей системы)
 * @var ZcmSauglState::MODE_AUTO_WAIT_HAND
 * @brief - Константа: Режим управления - автоматический ()
 * @var ZcmSauglState::MALS_OPERATION_STANDBY
 * @brief - Константа: Выполняемая операция МАЛС: стоянка
 * @var ZcmSauglState::MALS_OPERATION_ROUTE
 * @brief - Константа: Выполняемая операция МАЛС: движение до конца маршрута (в тупик или до светофора)
 * @var ZcmSauglState::MALS_OPERATION_OCCUPIED_TRACK
 * @brief - Константа: Выполняемая операция МАЛС: движение на занятый путь
 * @var ZcmSauglState::MALS_OPERATION_WAIT_CONNECT
 * @brief - Константа: Выполняемая операция МАЛС: ожидание сцепки
 * @var ZcmSauglState::MALS_OPERATION_EXTEND_CONNECT
 * @brief - Константа: Выполняемая операция МАЛС: растяжка автосцепки
 *
 */
typedef struct _ZcmSauglState ZcmSauglState;
struct _ZcmSauglState
{
    ZcmService service;
    int8_t     power;
    int16_t    brake;
    int8_t     reversor;
    int8_t     mode;
    int8_t     mals_operation;
    int16_t    pressure;
    int16_t    speed;
    int16_t    hold_speed;
};

/**
 * Create a deep copy of a ZcmSauglState.
 * When no longer needed, destroy it with ZcmSauglState_destroy()
 */
ZcmSauglState* ZcmSauglState_copy(const ZcmSauglState* to_copy);

/**
 * Destroy an instance of ZcmSauglState created by ZcmSauglState_copy()
 */
void ZcmSauglState_destroy(ZcmSauglState* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmSauglState_subscription_t ZcmSauglState_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmSauglState is received.
 */
typedef void(*ZcmSauglState_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmSauglState* msg, void* userdata);

/**
 * Publish a message of type ZcmSauglState using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmSauglState_publish(zcm_t* zcm, const char* channel, const ZcmSauglState* msg);

/**
 * Subscribe to messages of type ZcmSauglState using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmSauglState_unsubscribe.
 */
ZcmSauglState_subscription_t* ZcmSauglState_subscribe(zcm_t* zcm, const char* channel, ZcmSauglState_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmSauglState_subscribe()
 */
int ZcmSauglState_unsubscribe(zcm_t* zcm, ZcmSauglState_subscription_t* hid);
/**
 * Encode a message of type ZcmSauglState into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmSauglState_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmSauglState_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmSauglState* p);

/**
 * Decode a message of type ZcmSauglState from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmSauglState_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmSauglState_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmSauglState* msg);

/**
 * Release resources allocated by ZcmSauglState_decode()
 * @return 0
 */
int ZcmSauglState_decode_cleanup(ZcmSauglState* p);

/**
 * Check how many bytes are required to encode a message of type ZcmSauglState
 */
uint32_t ZcmSauglState_encoded_size(const ZcmSauglState* p);
uint32_t ZcmSauglState_struct_size(void);
uint32_t ZcmSauglState_num_fields(void);
int      ZcmSauglState_get_field(const ZcmSauglState* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmSauglState_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmSauglState_get_hash(void);
uint64_t __ZcmSauglState_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmSauglState_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmSauglState* p, uint32_t elements);
int      __ZcmSauglState_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmSauglState* p, uint32_t elements);
int      __ZcmSauglState_decode_array_cleanup(ZcmSauglState* p, uint32_t elements);
uint32_t __ZcmSauglState_encoded_array_size(const ZcmSauglState* p, uint32_t elements);
uint32_t __ZcmSauglState_clone_array(const ZcmSauglState* p, ZcmSauglState* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
