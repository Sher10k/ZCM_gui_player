// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmSauglMssduInfo_h
#define _ZcmSauglMssduInfo_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
#define ZCMSAUGLMSSDUINFO_COMMAND_DIESEL_NONE 0
#define ZCMSAUGLMSSDUINFO_COMMAND_DIESEL_START 1
#define ZCMSAUGLMSSDUINFO_COMMAND_DIESEL_STOP 2
#define ZCMSAUGLMSSDUINFO_HOLD_SPEED_NONE 0x00ff
#define ZCMSAUGLMSSDUINFO_HOLD_SPEED_CURRENT 0x00fe

/**
 * @struct ZcmSauglMssduInfo
 * @brief Информация от МССДУ
 * @var ZcmSauglMssduInfo::is_valid
 * @brief - Состояние работы: МССДУ активен/неактивен
 * @var ZcmSauglMssduInfo::is_control
 * @brief - Запрос на управление: МССДУ не управляет/хочет управлять
 * @var ZcmSauglMssduInfo::power
 * @brief - Значение контроллера тяги
 * @var ZcmSauglMssduInfo::brake
 * @brief - Значение позиции тормоза
 * @var ZcmSauglMssduInfo::reversor
 * @brief - Положение реверсора
 * @var ZcmSauglMssduInfo::command_diesel
 * @brief - Запуск/остановка дизеля
 * @var ZcmSauglMssduInfo::is_signal
 * @brief - Подача свистка
 * @var ZcmSauglMssduInfo::is_sand
 * @brief - Подача песка
 * @var ZcmSauglMssduInfo::is_autocoupler_off
 * @brief - Расцепка автосцепки: 0 - автосцепки с обеих сторон сцеплены; 1 - автосцепки с обеих сторон расцеплены
 * @var ZcmSauglMssduInfo::hold_speed
 * @brief - Установка поддерживаемой скорости (режим круиз-контроль), км/ч
 * @var ZcmSauglMssduInfo::counter
 * @brief - Счетчик команд
 * @var ZcmSauglMssduInfo::COMMAND_DIESEL_NONE
 * @brief - Константа, команда запуск/остановка дизеля: команда не выполняется
 * @var ZcmSauglMssduInfo::COMMAND_DIESEL_START
 * @brief - Константа, команда запуск/остановка дизеля: запуск дизеля
 * @var ZcmSauglMssduInfo::COMMAND_DIESEL_STOP
 * @brief - Константа, команда запуск/остановка дизеля: остановка дизеля
 * @var ZcmSauglMssduInfo::HOLD_SPEED_NONE
 * @brief - Константа, установка поддерживаемой скорости: команда не выполняется
 * @var ZcmSauglMssduInfo::HOLD_SPEED_CURRENT
 * @brief - Константа, установка поддерживаемой скорости: установить поддерживаемую скорость, равную текущей
 *
 */
typedef struct _ZcmSauglMssduInfo ZcmSauglMssduInfo;
struct _ZcmSauglMssduInfo
{
    ZcmService service;
    int8_t     is_valid;
    int8_t     is_control;
    int8_t     power;
    int16_t    brake;
    int8_t     reversor;
    int8_t     command_diesel;
    int8_t     is_signal;
    int8_t     is_sand;
    int8_t     is_autocoupler_off;
    int16_t    hold_speed;
    int16_t    counter;
};

/**
 * Create a deep copy of a ZcmSauglMssduInfo.
 * When no longer needed, destroy it with ZcmSauglMssduInfo_destroy()
 */
ZcmSauglMssduInfo* ZcmSauglMssduInfo_copy(const ZcmSauglMssduInfo* to_copy);

/**
 * Destroy an instance of ZcmSauglMssduInfo created by ZcmSauglMssduInfo_copy()
 */
void ZcmSauglMssduInfo_destroy(ZcmSauglMssduInfo* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmSauglMssduInfo_subscription_t ZcmSauglMssduInfo_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmSauglMssduInfo is received.
 */
typedef void(*ZcmSauglMssduInfo_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmSauglMssduInfo* msg, void* userdata);

/**
 * Publish a message of type ZcmSauglMssduInfo using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmSauglMssduInfo_publish(zcm_t* zcm, const char* channel, const ZcmSauglMssduInfo* msg);

/**
 * Subscribe to messages of type ZcmSauglMssduInfo using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmSauglMssduInfo_unsubscribe.
 */
ZcmSauglMssduInfo_subscription_t* ZcmSauglMssduInfo_subscribe(zcm_t* zcm, const char* channel, ZcmSauglMssduInfo_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmSauglMssduInfo_subscribe()
 */
int ZcmSauglMssduInfo_unsubscribe(zcm_t* zcm, ZcmSauglMssduInfo_subscription_t* hid);
/**
 * Encode a message of type ZcmSauglMssduInfo into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmSauglMssduInfo_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmSauglMssduInfo_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmSauglMssduInfo* p);

/**
 * Decode a message of type ZcmSauglMssduInfo from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmSauglMssduInfo_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmSauglMssduInfo_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmSauglMssduInfo* msg);

/**
 * Release resources allocated by ZcmSauglMssduInfo_decode()
 * @return 0
 */
int ZcmSauglMssduInfo_decode_cleanup(ZcmSauglMssduInfo* p);

/**
 * Check how many bytes are required to encode a message of type ZcmSauglMssduInfo
 */
uint32_t ZcmSauglMssduInfo_encoded_size(const ZcmSauglMssduInfo* p);
uint32_t ZcmSauglMssduInfo_struct_size(void);
uint32_t ZcmSauglMssduInfo_num_fields(void);
int      ZcmSauglMssduInfo_get_field(const ZcmSauglMssduInfo* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmSauglMssduInfo_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmSauglMssduInfo_get_hash(void);
uint64_t __ZcmSauglMssduInfo_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmSauglMssduInfo_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmSauglMssduInfo* p, uint32_t elements);
int      __ZcmSauglMssduInfo_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmSauglMssduInfo* p, uint32_t elements);
int      __ZcmSauglMssduInfo_decode_array_cleanup(ZcmSauglMssduInfo* p, uint32_t elements);
uint32_t __ZcmSauglMssduInfo_encoded_array_size(const ZcmSauglMssduInfo* p, uint32_t elements);
uint32_t __ZcmSauglMssduInfo_clone_array(const ZcmSauglMssduInfo* p, ZcmSauglMssduInfo* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
