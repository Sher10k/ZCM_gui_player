/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __ZcmSauglMssduInfo_hpp__
#define __ZcmSauglMssduInfo_hpp__

#include "ZcmService.hpp"


/**
 * @struct ZcmSauglMssduInfo
 * @brief Информация от МССДУ
 * @var ZcmSauglMssduInfo::is_valid
 * @brief - Состояние работы: МССДУ активен/неактивен
 * @var ZcmSauglMssduInfo::is_control
 * @brief - Запрос на управление: МССДУ не управляет/хочет управлять
 * @var ZcmSauglMssduInfo::power
 * @brief - Значение контроллера тяги
 * @var ZcmSauglMssduInfo::brake
 * @brief - Значение позиции тормоза
 * @var ZcmSauglMssduInfo::reversor
 * @brief - Положение реверсора
 * @var ZcmSauglMssduInfo::command_diesel
 * @brief - Запуск/остановка дизеля
 * @var ZcmSauglMssduInfo::is_signal
 * @brief - Подача свистка
 * @var ZcmSauglMssduInfo::is_sand
 * @brief - Подача песка
 * @var ZcmSauglMssduInfo::is_autocoupler_off
 * @brief - Расцепка автосцепки: 0 - автосцепки с обеих сторон сцеплены; 1 - автосцепки с обеих сторон расцеплены
 * @var ZcmSauglMssduInfo::hold_speed
 * @brief - Установка поддерживаемой скорости (режим круиз-контроль), км/ч
 * @var ZcmSauglMssduInfo::counter
 * @brief - Счетчик команд
 * @var ZcmSauglMssduInfo::COMMAND_DIESEL_NONE
 * @brief - Константа, команда запуск/остановка дизеля: команда не выполняется
 * @var ZcmSauglMssduInfo::COMMAND_DIESEL_START
 * @brief - Константа, команда запуск/остановка дизеля: запуск дизеля
 * @var ZcmSauglMssduInfo::COMMAND_DIESEL_STOP
 * @brief - Константа, команда запуск/остановка дизеля: остановка дизеля
 * @var ZcmSauglMssduInfo::HOLD_SPEED_NONE
 * @brief - Константа, установка поддерживаемой скорости: команда не выполняется
 * @var ZcmSauglMssduInfo::HOLD_SPEED_CURRENT
 * @brief - Константа, установка поддерживаемой скорости: установить поддерживаемую скорость, равную текущей
 *
 */
class ZcmSauglMssduInfo
{
    public:
        ZcmService service;

        int8_t     is_valid;

        int8_t     is_control;

        int8_t     power;

        int16_t    brake;

        int8_t     reversor;

        int8_t     command_diesel;

        int8_t     is_signal;

        int8_t     is_sand;

        int8_t     is_autocoupler_off;

        int16_t    hold_speed;

        int16_t    counter;

    public:
        #if __cplusplus > 199711L /* if c++11 */
        static constexpr int8_t   COMMAND_DIESEL_NONE = 0;
        static constexpr int8_t   COMMAND_DIESEL_START = 1;
        static constexpr int8_t   COMMAND_DIESEL_STOP = 2;
        static constexpr int16_t  HOLD_SPEED_NONE = 0x00ff;
        static constexpr int16_t  HOLD_SPEED_CURRENT = 0x00fe;
        #else
        static const     int8_t   COMMAND_DIESEL_NONE = 0;
        static const     int8_t   COMMAND_DIESEL_START = 1;
        static const     int8_t   COMMAND_DIESEL_STOP = 2;
        static const     int16_t  HOLD_SPEED_NONE = 0x00ff;
        static const     int16_t  HOLD_SPEED_CURRENT = 0x00fe;
        #endif

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~ZcmSauglMssduInfo() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ZcmSauglMssduInfo"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int ZcmSauglMssduInfo::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmSauglMssduInfo::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmSauglMssduInfo::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ZcmSauglMssduInfo::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* ZcmSauglMssduInfo::getTypeName()
{
    return "ZcmSauglMssduInfo";
}

int ZcmSauglMssduInfo::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->is_valid, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->is_control, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->power, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->brake, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->reversor, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->command_diesel, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->is_signal, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->is_sand, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->is_autocoupler_off, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->hold_speed, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->counter, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmSauglMssduInfo::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->is_valid, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->is_control, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->power, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->brake, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->reversor, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->command_diesel, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->is_signal, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->is_sand, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->is_autocoupler_off, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->hold_speed, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->counter, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmSauglMssduInfo::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += this->service._getEncodedSizeNoHash();
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t ZcmSauglMssduInfo::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == ZcmSauglMssduInfo::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)ZcmSauglMssduInfo::getHash };

    uint64_t hash = (uint64_t)0xa38e475288cde785LL +
         ZcmService::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
