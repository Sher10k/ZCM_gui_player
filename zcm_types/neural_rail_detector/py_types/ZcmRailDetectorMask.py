"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmCameraCalibratingParams import ZcmCameraCalibratingParams

from ZcmService import ZcmService

class ZcmRailDetectorMask(object):
    __slots__ = ["service", "calibration_params", "width", "height", "bytes_per_line", "format", "mask_size", "mask"]

    def __init__(self):
        self.service = ZcmService()
        self.calibration_params = ZcmCameraCalibratingParams()
        self.width = 0
        self.height = 0
        self.bytes_per_line = 0
        self.format = ""
        self.mask_size = 0
        self.mask = ""

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmRailDetectorMask._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        assert self.calibration_params._get_packed_fingerprint() == ZcmCameraCalibratingParams._get_packed_fingerprint()
        self.calibration_params._encode_one(buf)
        buf.write(struct.pack(">iii", self.width, self.height, self.bytes_per_line))
        __format_encoded = self.format.encode('utf-8')
        buf.write(struct.pack('>I', len(__format_encoded)+1))
        buf.write(__format_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">i", self.mask_size))
        buf.write(bytearray(self.mask[:self.mask_size]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmRailDetectorMask._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmRailDetectorMask._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmRailDetectorMask()
        self.service = ZcmService._decode_one(buf)
        self.calibration_params = ZcmCameraCalibratingParams._decode_one(buf)
        self.width, self.height, self.bytes_per_line = struct.unpack(">iii", buf.read(12))
        __format_len = struct.unpack('>I', buf.read(4))[0]
        self.format = buf.read(__format_len)[:-1].decode('utf-8', 'replace')
        self.mask_size = struct.unpack(">i", buf.read(4))[0]
        self.mask = buf.read(self.mask_size)
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmRailDetectorMask in parents: return 0
        newparents = parents + [ZcmRailDetectorMask]
        tmphash = (0x1cea73f019ebf30d+ ZcmService._get_hash_recursive(newparents)+ ZcmCameraCalibratingParams._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmRailDetectorMask._packed_fingerprint is None:
            ZcmRailDetectorMask._packed_fingerprint = struct.pack(">Q", ZcmRailDetectorMask._get_hash_recursive([]))
        return ZcmRailDetectorMask._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

