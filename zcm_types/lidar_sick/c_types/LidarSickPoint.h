// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _LidarSickPoint_h
#define _LidarSickPoint_h

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @mainpage Сообщения от лидара SICK
 * Данный документ содержит описание сообщений для работы
 * с лидаром SICK
 *
 * @struct LidarSickPoint
 * @brief Сообщение содержит информацию о всех точках полученных за одно сканирование
 * @var LidarSickPoint::echo_id
 * @brief - номер переотражения данной точки. От 0 до 2
 * @var LidarSickPoint::layer_id
 * @brief - номер сканирующего луча. 0 - 3
 * @var LidarSickPoint::point_type
 * @brief - тип точки: \n
 *              0x1 - transparent \n
 *              0x2 - осадки\n
 *              0x4 - земля\n
 *              0x8 - грязь\n
 * @var LidarSickPoint::horizontal_angle
 * @brief - значение угла в полярной системе координат (тики). \n
 *          Тик = LidarSickPoints::angle_per_tick градусов 
 *       
 * @var LidarSickPoint::radial_distance
 * @brief - значение расстояния в полярной системе координат (м)
 * @var LidarSickPoint::x
 * @brief - расстояние до точки по оси Х в декартовой системе координат (м)
 * @var LidarSickPoint::y
 * @brief - расстояние до точки по оси Y в декартовой системе координат (м)
 * @var LidarSickPoint::z
 * @brief - расстояние до точки по оси Z в декартовой системе координат (м)
 * @var LidarSickPoint::echo_pulse_width
 * @brief - ширина импульса переотражения (м)
 *
 */
typedef struct _LidarSickPoint LidarSickPoint;
struct _LidarSickPoint
{
    int16_t    echo_id;
    int16_t    layer_id;
    int32_t    point_type;
    int32_t    horizontal_angle;
    double     radial_distance;
    double     x;
    double     y;
    double     z;
    double     echo_pulse_width;
};

/**
 * Create a deep copy of a LidarSickPoint.
 * When no longer needed, destroy it with LidarSickPoint_destroy()
 */
LidarSickPoint* LidarSickPoint_copy(const LidarSickPoint* to_copy);

/**
 * Destroy an instance of LidarSickPoint created by LidarSickPoint_copy()
 */
void LidarSickPoint_destroy(LidarSickPoint* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _LidarSickPoint_subscription_t LidarSickPoint_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * LidarSickPoint is received.
 */
typedef void(*LidarSickPoint_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const LidarSickPoint* msg, void* userdata);

/**
 * Publish a message of type LidarSickPoint using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int LidarSickPoint_publish(zcm_t* zcm, const char* channel, const LidarSickPoint* msg);

/**
 * Subscribe to messages of type LidarSickPoint using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to LidarSickPoint_unsubscribe.
 */
LidarSickPoint_subscription_t* LidarSickPoint_subscribe(zcm_t* zcm, const char* channel, LidarSickPoint_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by LidarSickPoint_subscribe()
 */
int LidarSickPoint_unsubscribe(zcm_t* zcm, LidarSickPoint_subscription_t* hid);
/**
 * Encode a message of type LidarSickPoint into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to LidarSickPoint_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int LidarSickPoint_encode(void* buf, uint32_t offset, uint32_t maxlen, const LidarSickPoint* p);

/**
 * Decode a message of type LidarSickPoint from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with LidarSickPoint_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int LidarSickPoint_decode(const void* buf, uint32_t offset, uint32_t maxlen, LidarSickPoint* msg);

/**
 * Release resources allocated by LidarSickPoint_decode()
 * @return 0
 */
int LidarSickPoint_decode_cleanup(LidarSickPoint* p);

/**
 * Check how many bytes are required to encode a message of type LidarSickPoint
 */
uint32_t LidarSickPoint_encoded_size(const LidarSickPoint* p);
uint32_t LidarSickPoint_struct_size(void);
uint32_t LidarSickPoint_num_fields(void);
int      LidarSickPoint_get_field(const LidarSickPoint* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* LidarSickPoint_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __LidarSickPoint_get_hash(void);
uint64_t __LidarSickPoint_hash_recursive(const __zcm_hash_ptr* p);
int      __LidarSickPoint_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const LidarSickPoint* p, uint32_t elements);
int      __LidarSickPoint_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, LidarSickPoint* p, uint32_t elements);
int      __LidarSickPoint_decode_array_cleanup(LidarSickPoint* p, uint32_t elements);
uint32_t __LidarSickPoint_encoded_array_size(const LidarSickPoint* p, uint32_t elements);
uint32_t __LidarSickPoint_clone_array(const LidarSickPoint* p, LidarSickPoint* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
