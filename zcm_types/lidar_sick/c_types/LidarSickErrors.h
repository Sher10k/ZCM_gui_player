// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _LidarSickErrors_h
#define _LidarSickErrors_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
/**
 * @struct LidarSickErrors
 * @brief Сообщение содержит информацию об ошибках
 * @var LidarSickErrors::contact_support
 * @brief - Признак наличия ошибки
 * @var LidarSickErrors::buffer_transferred_incompletely
 * @brief - Данные переданы не полностью
 * @var LidarSickErrors::buffer_overflow
 * @brief - Переполнение буфера
 * @var LidarSickErrors::under_temperature
 * @brief - Температура ниже минимальной рабочей
 * @var LidarSickErrors::over_temperature
 * @brief - Температура выше минимальной рабочей
 * @var LidarSickErrors::temp_sensor_defect
 * @brief - Датчик температуры не исправен
 * @var LidarSickErrors::dsp_not_receiving_data
 * @brief - DSP не получает данные сканирования от FPGA
 * @var LidarSickErrors::dsp_not_commenuicate_fpga
 * @brief - DSP не может связаться с FPGA
 * @var LidarSickErrors::dsp_communication_timeout
 * @brief - DSP не получает данные от FPGA более 500мс
 * @var LidarSickErrors::incorrect_configuration_data
 * @brief - Некорректная конфигурация
 * @var LidarSickErrors::incorrect_configuration_param
 * @brief - Конфигурация содержит некорректные значения параметров
 * @var LidarSickErrors::data_processing_timeout
 * @brief - Таймаут обработки данных
 * @var LidarSickErrors::can_message_lost
 * @brief - Потеряно сообщение из шины CAN
 * @var LidarSickErrors::severe_deviation
 * @brief - Отклонение от частоты сканирования более 10%
 * @var LidarSickErrors::motor_blocked
 * @brief - Мотор заблокирован
 *
 */
typedef struct _LidarSickErrors LidarSickErrors;
struct _LidarSickErrors
{
    ZcmService service;
    int8_t     contact_support;
    int8_t     buffer_transferred_incompletely;
    int8_t     buffer_overflow;
    int8_t     under_temperature;
    int8_t     over_temperature;
    int8_t     temp_sensor_defect;
    int8_t     dsp_not_receiving_data;
    int8_t     dsp_not_communicate_fpga;
    int8_t     dsp_communication_timeout;
    int8_t     incorrect_configuration_data;
    int8_t     incorrect_configuration_param;
    int8_t     data_processing_timeout;
    int8_t     can_message_lost;
    int8_t     severe_deviation;
    int8_t     motor_blocked;
};

/**
 * Create a deep copy of a LidarSickErrors.
 * When no longer needed, destroy it with LidarSickErrors_destroy()
 */
LidarSickErrors* LidarSickErrors_copy(const LidarSickErrors* to_copy);

/**
 * Destroy an instance of LidarSickErrors created by LidarSickErrors_copy()
 */
void LidarSickErrors_destroy(LidarSickErrors* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _LidarSickErrors_subscription_t LidarSickErrors_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * LidarSickErrors is received.
 */
typedef void(*LidarSickErrors_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const LidarSickErrors* msg, void* userdata);

/**
 * Publish a message of type LidarSickErrors using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int LidarSickErrors_publish(zcm_t* zcm, const char* channel, const LidarSickErrors* msg);

/**
 * Subscribe to messages of type LidarSickErrors using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to LidarSickErrors_unsubscribe.
 */
LidarSickErrors_subscription_t* LidarSickErrors_subscribe(zcm_t* zcm, const char* channel, LidarSickErrors_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by LidarSickErrors_subscribe()
 */
int LidarSickErrors_unsubscribe(zcm_t* zcm, LidarSickErrors_subscription_t* hid);
/**
 * Encode a message of type LidarSickErrors into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to LidarSickErrors_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int LidarSickErrors_encode(void* buf, uint32_t offset, uint32_t maxlen, const LidarSickErrors* p);

/**
 * Decode a message of type LidarSickErrors from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with LidarSickErrors_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int LidarSickErrors_decode(const void* buf, uint32_t offset, uint32_t maxlen, LidarSickErrors* msg);

/**
 * Release resources allocated by LidarSickErrors_decode()
 * @return 0
 */
int LidarSickErrors_decode_cleanup(LidarSickErrors* p);

/**
 * Check how many bytes are required to encode a message of type LidarSickErrors
 */
uint32_t LidarSickErrors_encoded_size(const LidarSickErrors* p);
uint32_t LidarSickErrors_struct_size(void);
uint32_t LidarSickErrors_num_fields(void);
int      LidarSickErrors_get_field(const LidarSickErrors* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* LidarSickErrors_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __LidarSickErrors_get_hash(void);
uint64_t __LidarSickErrors_hash_recursive(const __zcm_hash_ptr* p);
int      __LidarSickErrors_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const LidarSickErrors* p, uint32_t elements);
int      __LidarSickErrors_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, LidarSickErrors* p, uint32_t elements);
int      __LidarSickErrors_decode_array_cleanup(LidarSickErrors* p, uint32_t elements);
uint32_t __LidarSickErrors_encoded_array_size(const LidarSickErrors* p, uint32_t elements);
uint32_t __LidarSickErrors_clone_array(const LidarSickErrors* p, LidarSickErrors* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
