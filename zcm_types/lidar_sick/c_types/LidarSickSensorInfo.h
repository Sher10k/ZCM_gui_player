// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _LidarSickSensorInfo_h
#define _LidarSickSensorInfo_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
/**
 * @struct LidarSickSensorInfo
 * @brief Сообщение содержит информацию о состоянии лидара
 * @var LidarSickSensorInfo::version
 * @brief - номер версии сообщения о состоянии сенсора
 * @var LidarSickSensorInfo::related_scan_num
 * @brief - номер скана
 * @var LidarSickSensorInfo::error_fpga_1
 * @brief - Состояние регистра ошибок 1
 * @var LidarSickSensorInfo::error_fpga_2
 * @brief - Состояние регистра ошибок 2
 * @var LidarSickSensorInfo::warning_fpga_1
 * @brief - Состояние регистра предупреждений 1
 * @var LidarSickSensorInfo::warning_dsp_2
 * @brief - Состояние регистра предупреждений 2
 * @var LidarSickSensorInfo::temperature
 * @brief - Температура лидара
 * @var LidarSickSensorInfo::apd_voltage
 * @brief - Напряжение на датчике
 * @var LidarSickSensorInfo::apd_voltage_reduction
 * @brief - Падение напряжения на датчике
 * @var LidarSickSensorInfo::rotation_duration_ms
 * @brief - Время между предыдущим и текущим сканированием
 * @var LidarSickSensorInfo::operating_hours
 * @brief - Время работы лидара
 * @var LidarSickSensorInfo::scanner_blind
 * @brief - Состояние датчика лидара
 * @var LidarSickSensorInfo::noise_reduction_active
 * @brief - Состояния системы шумоподавления вкл/выкл
 * @var LidarSickSensorInfo::range_estimation
 * @brief - Дистанция измерения от 0 - 100%
 * @var LidarSickSensorInfo::contact_support
 * @brief - Признак наличия ошибки
 * @var LidarSickSensorInfo::buffer_transferred_incompletely
 * @brief - Данные переданы не полностью
 * @var LidarSickSensorInfo::buffer_overflow
 * @brief - Переполнение буфера
 * @var LidarSickSensorInfo::under_temperature
 * @brief - Температура ниже минимальной рабочей
 * @var LidarSickSensorInfo::over_temperature
 * @brief - Температура выше минимальной рабочей
 * @var LidarSickSensorInfo::temp_sensor_defect
 * @brief - Датчик температуры не исправен
 * @var LidarSickSensorInfo::dsp_not_receiving_data
 * @brief - DSP не получает данные сканирования от FPGA
 * @var LidarSickSensorInfo::dsp_not_commenuicate_fpga
 * @brief - DSP не может связаться с FPGA
 * @var LidarSickErrors::dsp_communication_timeout
 * @brief - DSP не получает данные от FPGA более 500мс
 * @var LidarSickSensorInfo::incorrect_configuration_data
 * @brief - Некорректная конфигурация
 * @var LidarSickSensorInfo::incorrect_configuration_param
 * @brief - Конфигурация содержит некорректные значения параметров
 * @var LidarSickSensorInfo::data_processing_timeout
 * @brief - Таймаут обработки данных
 * @var LidarSickSensorInfo::can_message_lost
 * @brief - Потеряно сообщение из шины CAN
 * @var LidarSickSensorInfo::severe_deviation
 * @brief - Отклонение от частоты сканирования более 10%
 * @var LidarSickSensorInfo::motor_blocked
 * @brief - Мотор заблокирован
 * @var LidarSickSensorInfo::low_temperature
 * @brief - Температура близка к минимальной рабочей температуре
 * @var LidarSickSensorInfo::high_temperature
 * @brief - Температура близка к максимальной рабочей температуре
 * @var LidarSickSensorInfo::check_sync_scan_freq
 * @brief - Проверьте частоту сканирования и синхроизации
 * @var LidarSickSensorInfo::startpulse_not_detected_1
 * @brief - Стартовый импульс первого лазера не получен
 * @var LidarSickSensorInfo::startpulse_not_detected_2
 * @brief - Стартовый импульс второго лазера не получен
 * @var LidarSickSensorInfo::can_blocked
 * @brief - Шина CAN заблокирована
 * @var LidarSickSensorInfo::eth_blocked
 * @brief - сетевой интерфейс заблокирован
 * @var LidarSickSensorInfo::check_eth_data
 * @brief - Проверьте данные от сетевого интерфейса
 * @var LidarSickSensorInfo::incorrect_command_received
 * @brief - Получена некорректная или запрещенная команда
 * @var LidarSickSensorInfo::memory_access_failure
 * @brief - Ошибка доступа к памяти
 * @var LidarSickSensorInfo::segment_overflow
 * @brief - Переполнение сегмента
 * @var LidarSickSensorInfo::ego_motion
 * @brief - Получены данные о движении
 * @var LidarSickSensorInfo::mounting_pos
 * @brief - Параметры расположения лидара
 * @var LidarSickSensorInfo::calc_freq
 * @brief - Вычислення частота
 * @var LidarSickSensorInfo::no_ntp_time
 * @brief - Нет времени NTP
 * @var LidarSickSensorInfo::no_time_sync_pps
 * @brief - Нет времени синхронизации времени pps
 * @var LidarSickSensorInfo::no_time_sync_command
 * @brief - Нет команды синхронизации времени
 * @var LidarSickSensorInfo::no_time_sync
 * @brief - Нет синхронизации времени
 * @var LidarSickSensorInfo::slight_deviation
 * @brief - Отклонение частоты сканирования в диапазоне 5..10%
 *
 */
typedef struct _LidarSickSensorInfo LidarSickSensorInfo;
struct _LidarSickSensorInfo
{
    ZcmService service;
    int16_t    version;
    int16_t    related_scan_num;
    int16_t    temperature;
    int16_t    apd_voltage;
    int16_t    apd_voltage_reduction;
    int32_t    rotation_duration_ms;
    int32_t    operating_hours;
    int8_t     scanner_blind;
    int8_t     noise_reduction_active;
    int16_t    range_estimation;
    int8_t     contact_support;
    int8_t     buffer_transferred_incompletely;
    int8_t     buffer_overflow;
    int8_t     under_temperature;
    int8_t     over_temperature;
    int8_t     temp_sensor_defect;
    int8_t     dsp_not_receiving_data;
    int8_t     dsp_not_communicate_fpga;
    int8_t     dsp_communication_timeout;
    int8_t     incorrect_configuration_data;
    int8_t     incorrect_configuration_param;
    int8_t     data_processing_timeout;
    int8_t     can_message_lost;
    int8_t     severe_deviation;
    int8_t     motor_blocked;
    int8_t     low_temperature;
    int8_t     high_temperature;
    int8_t     check_sync_scan_freq;
    int8_t     startpulse_not_detected_1;
    int8_t     startpulse_not_detected_2;
    int8_t     can_blocked;
    int8_t     eth_blocked;
    int8_t     check_eth_data;
    int8_t     incorrect_command_received;
    int8_t     memory_access_failure;
    int8_t     segment_overflow;
    int8_t     ego_motion;
    int8_t     mounting_pos;
    int8_t     calc_freq;
    int8_t     no_ntp_time;
    int8_t     no_time_sync_pps;
    int8_t     no_time_sync_command;
    int8_t     no_time_sync;
    int8_t     slight_deviation;
};

/**
 * Create a deep copy of a LidarSickSensorInfo.
 * When no longer needed, destroy it with LidarSickSensorInfo_destroy()
 */
LidarSickSensorInfo* LidarSickSensorInfo_copy(const LidarSickSensorInfo* to_copy);

/**
 * Destroy an instance of LidarSickSensorInfo created by LidarSickSensorInfo_copy()
 */
void LidarSickSensorInfo_destroy(LidarSickSensorInfo* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _LidarSickSensorInfo_subscription_t LidarSickSensorInfo_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * LidarSickSensorInfo is received.
 */
typedef void(*LidarSickSensorInfo_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const LidarSickSensorInfo* msg, void* userdata);

/**
 * Publish a message of type LidarSickSensorInfo using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int LidarSickSensorInfo_publish(zcm_t* zcm, const char* channel, const LidarSickSensorInfo* msg);

/**
 * Subscribe to messages of type LidarSickSensorInfo using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to LidarSickSensorInfo_unsubscribe.
 */
LidarSickSensorInfo_subscription_t* LidarSickSensorInfo_subscribe(zcm_t* zcm, const char* channel, LidarSickSensorInfo_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by LidarSickSensorInfo_subscribe()
 */
int LidarSickSensorInfo_unsubscribe(zcm_t* zcm, LidarSickSensorInfo_subscription_t* hid);
/**
 * Encode a message of type LidarSickSensorInfo into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to LidarSickSensorInfo_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int LidarSickSensorInfo_encode(void* buf, uint32_t offset, uint32_t maxlen, const LidarSickSensorInfo* p);

/**
 * Decode a message of type LidarSickSensorInfo from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with LidarSickSensorInfo_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int LidarSickSensorInfo_decode(const void* buf, uint32_t offset, uint32_t maxlen, LidarSickSensorInfo* msg);

/**
 * Release resources allocated by LidarSickSensorInfo_decode()
 * @return 0
 */
int LidarSickSensorInfo_decode_cleanup(LidarSickSensorInfo* p);

/**
 * Check how many bytes are required to encode a message of type LidarSickSensorInfo
 */
uint32_t LidarSickSensorInfo_encoded_size(const LidarSickSensorInfo* p);
uint32_t LidarSickSensorInfo_struct_size(void);
uint32_t LidarSickSensorInfo_num_fields(void);
int      LidarSickSensorInfo_get_field(const LidarSickSensorInfo* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* LidarSickSensorInfo_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __LidarSickSensorInfo_get_hash(void);
uint64_t __LidarSickSensorInfo_hash_recursive(const __zcm_hash_ptr* p);
int      __LidarSickSensorInfo_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const LidarSickSensorInfo* p, uint32_t elements);
int      __LidarSickSensorInfo_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, LidarSickSensorInfo* p, uint32_t elements);
int      __LidarSickSensorInfo_decode_array_cleanup(LidarSickSensorInfo* p, uint32_t elements);
uint32_t __LidarSickSensorInfo_encoded_array_size(const LidarSickSensorInfo* p, uint32_t elements);
uint32_t __LidarSickSensorInfo_clone_array(const LidarSickSensorInfo* p, LidarSickSensorInfo* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
