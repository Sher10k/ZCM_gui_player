// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _LidarSickWarnings_h
#define _LidarSickWarnings_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
/**
 * @struct LidarSickWarnings
 * @brief Сообщение содержит информацию о предупреждениях
 * @var LidarSickWarnings::contact_support
 * @brief - Признак наличия ошибки
 * @var LidarSickWarnings::low_temperature
 * @brief - Температура близка к минимальной рабочей температуре
 * @var LidarSickWarnings::high_temperature
 * @brief - Температура близка к максимальной рабочей температуре
 * @var LidarSickWarnings::check_sync_scan_freq
 * @brief - Проверьте частоту сканирования и синхроизации
 * @var LidarSickWarnings::startpulse_not_detected_1
 * @brief - Стартовый импульс первого лазера не получен
 * @var LidarSickWarnings::startpulse_not_detected_2
 * @brief - Стартовый импульс второго лазера не получен
 * @var LidarSickWarnings::can_blocked
 * @brief - Шина CAN заблокирована
 * @var LidarSickWarnings::eth_blocked
 * @brief - сетевой интерфейс заблокирован
 * @var LidarSickWarnings::check_eth_data
 * @brief - Проверьте данные от сетевого интерфейса
 * @var LidarSickWarnings::incorrect_command_received
 * @brief - Получена некорректная или запрещенная команда
 * @var LidarSickWarnings::memory_access_failure
 * @brief - Ошибка доступа к памяти
 * @var LidarSickWarnings::segment_overflow
 * @brief - Переполнение сегмента
 * @var LidarSickWarnings::ego_motion
 * @brief - Получены данные о движении
 * @var LidarSickWarnings::mounting_pos
 * @brief - Параметры расположения лидара
 * @var LidarSickWarnings::calc_freq
 * @brief - Вычислення частота
 * @var LidarSickWarnings::no_ntp_time
 * @brief - Нет времени NTP
 * @var LidarSickWarnings::no_time_sync_pps
 * @brief - Нет времени синхронизации времени pps
 * @var LidarSickWarnings::no_time_sync_command
 * @brief - Нет команды синхронизации времени
 * @var LidarSickWarnings::no_time_sync
 * @brief - Нет синхронизации времени
 * @var LidarSickWarnings::slight_deviation
 * @brief - Отклонение частоты сканирования в диапазоне 5..10%
 *
 */
typedef struct _LidarSickWarnings LidarSickWarnings;
struct _LidarSickWarnings
{
    ZcmService service;
    int8_t     contact_support;
    int8_t     low_temperature;
    int8_t     high_temperature;
    int8_t     check_sync_scan_freq;
    int8_t     startpulse_not_detected_1;
    int8_t     startpulse_not_detected_2;
    int8_t     can_blocked;
    int8_t     eth_blocked;
    int8_t     check_eth_data;
    int8_t     incorrect_command_received;
    int8_t     memory_access_failure;
    int8_t     segment_overflow;
    int8_t     ego_motion;
    int8_t     mounting_pos;
    int8_t     calc_freq;
    int8_t     no_ntp_time;
    int8_t     no_time_sync_pps;
    int8_t     no_time_sync_command;
    int8_t     no_time_sync;
    int8_t     slight_deviation;
};

/**
 * Create a deep copy of a LidarSickWarnings.
 * When no longer needed, destroy it with LidarSickWarnings_destroy()
 */
LidarSickWarnings* LidarSickWarnings_copy(const LidarSickWarnings* to_copy);

/**
 * Destroy an instance of LidarSickWarnings created by LidarSickWarnings_copy()
 */
void LidarSickWarnings_destroy(LidarSickWarnings* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _LidarSickWarnings_subscription_t LidarSickWarnings_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * LidarSickWarnings is received.
 */
typedef void(*LidarSickWarnings_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const LidarSickWarnings* msg, void* userdata);

/**
 * Publish a message of type LidarSickWarnings using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int LidarSickWarnings_publish(zcm_t* zcm, const char* channel, const LidarSickWarnings* msg);

/**
 * Subscribe to messages of type LidarSickWarnings using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to LidarSickWarnings_unsubscribe.
 */
LidarSickWarnings_subscription_t* LidarSickWarnings_subscribe(zcm_t* zcm, const char* channel, LidarSickWarnings_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by LidarSickWarnings_subscribe()
 */
int LidarSickWarnings_unsubscribe(zcm_t* zcm, LidarSickWarnings_subscription_t* hid);
/**
 * Encode a message of type LidarSickWarnings into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to LidarSickWarnings_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int LidarSickWarnings_encode(void* buf, uint32_t offset, uint32_t maxlen, const LidarSickWarnings* p);

/**
 * Decode a message of type LidarSickWarnings from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with LidarSickWarnings_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int LidarSickWarnings_decode(const void* buf, uint32_t offset, uint32_t maxlen, LidarSickWarnings* msg);

/**
 * Release resources allocated by LidarSickWarnings_decode()
 * @return 0
 */
int LidarSickWarnings_decode_cleanup(LidarSickWarnings* p);

/**
 * Check how many bytes are required to encode a message of type LidarSickWarnings
 */
uint32_t LidarSickWarnings_encoded_size(const LidarSickWarnings* p);
uint32_t LidarSickWarnings_struct_size(void);
uint32_t LidarSickWarnings_num_fields(void);
int      LidarSickWarnings_get_field(const LidarSickWarnings* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* LidarSickWarnings_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __LidarSickWarnings_get_hash(void);
uint64_t __LidarSickWarnings_hash_recursive(const __zcm_hash_ptr* p);
int      __LidarSickWarnings_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const LidarSickWarnings* p, uint32_t elements);
int      __LidarSickWarnings_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, LidarSickWarnings* p, uint32_t elements);
int      __LidarSickWarnings_decode_array_cleanup(LidarSickWarnings* p, uint32_t elements);
uint32_t __LidarSickWarnings_encoded_array_size(const LidarSickWarnings* p, uint32_t elements);
uint32_t __LidarSickWarnings_clone_array(const LidarSickWarnings* p, LidarSickWarnings* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
