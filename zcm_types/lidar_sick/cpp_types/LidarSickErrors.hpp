/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __LidarSickErrors_hpp__
#define __LidarSickErrors_hpp__

#include "ZcmService.hpp"


/**
 * @struct LidarSickErrors
 * @brief Сообщение содержит информацию об ошибках
 * @var LidarSickErrors::contact_support
 * @brief - Признак наличия ошибки
 * @var LidarSickErrors::buffer_transferred_incompletely
 * @brief - Данные переданы не полностью
 * @var LidarSickErrors::buffer_overflow
 * @brief - Переполнение буфера
 * @var LidarSickErrors::under_temperature
 * @brief - Температура ниже минимальной рабочей
 * @var LidarSickErrors::over_temperature
 * @brief - Температура выше минимальной рабочей
 * @var LidarSickErrors::temp_sensor_defect
 * @brief - Датчик температуры не исправен
 * @var LidarSickErrors::dsp_not_receiving_data
 * @brief - DSP не получает данные сканирования от FPGA
 * @var LidarSickErrors::dsp_not_commenuicate_fpga
 * @brief - DSP не может связаться с FPGA
 * @var LidarSickErrors::dsp_communication_timeout
 * @brief - DSP не получает данные от FPGA более 500мс
 * @var LidarSickErrors::incorrect_configuration_data
 * @brief - Некорректная конфигурация
 * @var LidarSickErrors::incorrect_configuration_param
 * @brief - Конфигурация содержит некорректные значения параметров
 * @var LidarSickErrors::data_processing_timeout
 * @brief - Таймаут обработки данных
 * @var LidarSickErrors::can_message_lost
 * @brief - Потеряно сообщение из шины CAN
 * @var LidarSickErrors::severe_deviation
 * @brief - Отклонение от частоты сканирования более 10%
 * @var LidarSickErrors::motor_blocked
 * @brief - Мотор заблокирован
 *
 */
class LidarSickErrors
{
    public:
        ZcmService service;

        int8_t     contact_support;

        int8_t     buffer_transferred_incompletely;

        int8_t     buffer_overflow;

        int8_t     under_temperature;

        int8_t     over_temperature;

        int8_t     temp_sensor_defect;

        int8_t     dsp_not_receiving_data;

        int8_t     dsp_not_communicate_fpga;

        int8_t     dsp_communication_timeout;

        int8_t     incorrect_configuration_data;

        int8_t     incorrect_configuration_param;

        int8_t     data_processing_timeout;

        int8_t     can_message_lost;

        int8_t     severe_deviation;

        int8_t     motor_blocked;

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~LidarSickErrors() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "LidarSickErrors"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int LidarSickErrors::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int LidarSickErrors::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t LidarSickErrors::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t LidarSickErrors::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* LidarSickErrors::getTypeName()
{
    return "LidarSickErrors";
}

int LidarSickErrors::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->contact_support, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->buffer_transferred_incompletely, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->buffer_overflow, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->under_temperature, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->over_temperature, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->temp_sensor_defect, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->dsp_not_receiving_data, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->dsp_not_communicate_fpga, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->dsp_communication_timeout, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->incorrect_configuration_data, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->incorrect_configuration_param, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->data_processing_timeout, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->can_message_lost, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->severe_deviation, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->motor_blocked, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int LidarSickErrors::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->contact_support, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->buffer_transferred_incompletely, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->buffer_overflow, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->under_temperature, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->over_temperature, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->temp_sensor_defect, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->dsp_not_receiving_data, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->dsp_not_communicate_fpga, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->dsp_communication_timeout, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->incorrect_configuration_data, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->incorrect_configuration_param, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->data_processing_timeout, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->can_message_lost, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->severe_deviation, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->motor_blocked, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t LidarSickErrors::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += this->service._getEncodedSizeNoHash();
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t LidarSickErrors::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == LidarSickErrors::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)LidarSickErrors::getHash };

    uint64_t hash = (uint64_t)0x0aae5f84d16c4accLL +
         ZcmService::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
