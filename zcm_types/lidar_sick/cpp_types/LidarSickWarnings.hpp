/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __LidarSickWarnings_hpp__
#define __LidarSickWarnings_hpp__

#include "ZcmService.hpp"


/**
 * @struct LidarSickWarnings
 * @brief Сообщение содержит информацию о предупреждениях
 * @var LidarSickWarnings::contact_support
 * @brief - Признак наличия ошибки
 * @var LidarSickWarnings::low_temperature
 * @brief - Температура близка к минимальной рабочей температуре
 * @var LidarSickWarnings::high_temperature
 * @brief - Температура близка к максимальной рабочей температуре
 * @var LidarSickWarnings::check_sync_scan_freq
 * @brief - Проверьте частоту сканирования и синхроизации
 * @var LidarSickWarnings::startpulse_not_detected_1
 * @brief - Стартовый импульс первого лазера не получен
 * @var LidarSickWarnings::startpulse_not_detected_2
 * @brief - Стартовый импульс второго лазера не получен
 * @var LidarSickWarnings::can_blocked
 * @brief - Шина CAN заблокирована
 * @var LidarSickWarnings::eth_blocked
 * @brief - сетевой интерфейс заблокирован
 * @var LidarSickWarnings::check_eth_data
 * @brief - Проверьте данные от сетевого интерфейса
 * @var LidarSickWarnings::incorrect_command_received
 * @brief - Получена некорректная или запрещенная команда
 * @var LidarSickWarnings::memory_access_failure
 * @brief - Ошибка доступа к памяти
 * @var LidarSickWarnings::segment_overflow
 * @brief - Переполнение сегмента
 * @var LidarSickWarnings::ego_motion
 * @brief - Получены данные о движении
 * @var LidarSickWarnings::mounting_pos
 * @brief - Параметры расположения лидара
 * @var LidarSickWarnings::calc_freq
 * @brief - Вычислення частота
 * @var LidarSickWarnings::no_ntp_time
 * @brief - Нет времени NTP
 * @var LidarSickWarnings::no_time_sync_pps
 * @brief - Нет времени синхронизации времени pps
 * @var LidarSickWarnings::no_time_sync_command
 * @brief - Нет команды синхронизации времени
 * @var LidarSickWarnings::no_time_sync
 * @brief - Нет синхронизации времени
 * @var LidarSickWarnings::slight_deviation
 * @brief - Отклонение частоты сканирования в диапазоне 5..10%
 *
 */
class LidarSickWarnings
{
    public:
        ZcmService service;

        int8_t     contact_support;

        int8_t     low_temperature;

        int8_t     high_temperature;

        int8_t     check_sync_scan_freq;

        int8_t     startpulse_not_detected_1;

        int8_t     startpulse_not_detected_2;

        int8_t     can_blocked;

        int8_t     eth_blocked;

        int8_t     check_eth_data;

        int8_t     incorrect_command_received;

        int8_t     memory_access_failure;

        int8_t     segment_overflow;

        int8_t     ego_motion;

        int8_t     mounting_pos;

        int8_t     calc_freq;

        int8_t     no_ntp_time;

        int8_t     no_time_sync_pps;

        int8_t     no_time_sync_command;

        int8_t     no_time_sync;

        int8_t     slight_deviation;

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~LidarSickWarnings() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "LidarSickWarnings"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int LidarSickWarnings::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int LidarSickWarnings::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t LidarSickWarnings::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t LidarSickWarnings::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* LidarSickWarnings::getTypeName()
{
    return "LidarSickWarnings";
}

int LidarSickWarnings::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->contact_support, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->low_temperature, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->high_temperature, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->check_sync_scan_freq, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->startpulse_not_detected_1, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->startpulse_not_detected_2, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->can_blocked, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->eth_blocked, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->check_eth_data, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->incorrect_command_received, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->memory_access_failure, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->segment_overflow, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->ego_motion, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->mounting_pos, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->calc_freq, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->no_ntp_time, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->no_time_sync_pps, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->no_time_sync_command, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->no_time_sync, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->slight_deviation, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int LidarSickWarnings::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->contact_support, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->low_temperature, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->high_temperature, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->check_sync_scan_freq, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->startpulse_not_detected_1, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->startpulse_not_detected_2, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->can_blocked, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->eth_blocked, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->check_eth_data, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->incorrect_command_received, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->memory_access_failure, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->segment_overflow, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->ego_motion, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->mounting_pos, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->calc_freq, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->no_ntp_time, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->no_time_sync_pps, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->no_time_sync_command, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->no_time_sync, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->slight_deviation, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t LidarSickWarnings::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += this->service._getEncodedSizeNoHash();
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t LidarSickWarnings::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == LidarSickWarnings::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)LidarSickWarnings::getHash };

    uint64_t hash = (uint64_t)0x2370de4e6af21b93LL +
         ZcmService::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
