"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmService import ZcmService

class LidarSickWarnings(object):
    __slots__ = ["service", "contact_support", "low_temperature", "high_temperature", "check_sync_scan_freq", "startpulse_not_detected_1", "startpulse_not_detected_2", "can_blocked", "eth_blocked", "check_eth_data", "incorrect_command_received", "memory_access_failure", "segment_overflow", "ego_motion", "mounting_pos", "calc_freq", "no_ntp_time", "no_time_sync_pps", "no_time_sync_command", "no_time_sync", "slight_deviation"]

    def __init__(self):
        self.service = ZcmService()
        self.contact_support = False
        self.low_temperature = False
        self.high_temperature = False
        self.check_sync_scan_freq = False
        self.startpulse_not_detected_1 = False
        self.startpulse_not_detected_2 = False
        self.can_blocked = False
        self.eth_blocked = False
        self.check_eth_data = False
        self.incorrect_command_received = False
        self.memory_access_failure = False
        self.segment_overflow = False
        self.ego_motion = False
        self.mounting_pos = False
        self.calc_freq = False
        self.no_ntp_time = False
        self.no_time_sync_pps = False
        self.no_time_sync_command = False
        self.no_time_sync = False
        self.slight_deviation = False

    def encode(self):
        buf = BytesIO()
        buf.write(LidarSickWarnings._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        buf.write(struct.pack(">bbbbbbbbbbbbbbbbbbbb", self.contact_support, self.low_temperature, self.high_temperature, self.check_sync_scan_freq, self.startpulse_not_detected_1, self.startpulse_not_detected_2, self.can_blocked, self.eth_blocked, self.check_eth_data, self.incorrect_command_received, self.memory_access_failure, self.segment_overflow, self.ego_motion, self.mounting_pos, self.calc_freq, self.no_ntp_time, self.no_time_sync_pps, self.no_time_sync_command, self.no_time_sync, self.slight_deviation))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LidarSickWarnings._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LidarSickWarnings._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = LidarSickWarnings()
        self.service = ZcmService._decode_one(buf)
        self.contact_support = bool(struct.unpack('b', buf.read(1))[0])
        self.low_temperature = bool(struct.unpack('b', buf.read(1))[0])
        self.high_temperature = bool(struct.unpack('b', buf.read(1))[0])
        self.check_sync_scan_freq = bool(struct.unpack('b', buf.read(1))[0])
        self.startpulse_not_detected_1 = bool(struct.unpack('b', buf.read(1))[0])
        self.startpulse_not_detected_2 = bool(struct.unpack('b', buf.read(1))[0])
        self.can_blocked = bool(struct.unpack('b', buf.read(1))[0])
        self.eth_blocked = bool(struct.unpack('b', buf.read(1))[0])
        self.check_eth_data = bool(struct.unpack('b', buf.read(1))[0])
        self.incorrect_command_received = bool(struct.unpack('b', buf.read(1))[0])
        self.memory_access_failure = bool(struct.unpack('b', buf.read(1))[0])
        self.segment_overflow = bool(struct.unpack('b', buf.read(1))[0])
        self.ego_motion = bool(struct.unpack('b', buf.read(1))[0])
        self.mounting_pos = bool(struct.unpack('b', buf.read(1))[0])
        self.calc_freq = bool(struct.unpack('b', buf.read(1))[0])
        self.no_ntp_time = bool(struct.unpack('b', buf.read(1))[0])
        self.no_time_sync_pps = bool(struct.unpack('b', buf.read(1))[0])
        self.no_time_sync_command = bool(struct.unpack('b', buf.read(1))[0])
        self.no_time_sync = bool(struct.unpack('b', buf.read(1))[0])
        self.slight_deviation = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if LidarSickWarnings in parents: return 0
        newparents = parents + [LidarSickWarnings]
        tmphash = (0x2370de4e6af21b93+ ZcmService._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if LidarSickWarnings._packed_fingerprint is None:
            LidarSickWarnings._packed_fingerprint = struct.pack(">Q", LidarSickWarnings._get_hash_recursive([]))
        return LidarSickWarnings._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

