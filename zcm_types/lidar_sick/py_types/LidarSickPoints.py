"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from LidarSickPoint import LidarSickPoint

from ZcmService import ZcmService

class LidarSickPoints(object):
    __slots__ = ["service", "scan_number", "scanner_height", "points_count", "points"]

    angle_per_tick = 0.03125
    angle_per_layer = 0.8

    def __init__(self):
        self.service = ZcmService()
        self.scan_number = 0
        self.scanner_height = 0.0
        self.points_count = 0
        self.points = []

    def encode(self):
        buf = BytesIO()
        buf.write(LidarSickPoints._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        buf.write(struct.pack(">idi", self.scan_number, self.scanner_height, self.points_count))
        for i0 in range(self.points_count):
            assert self.points[i0]._get_packed_fingerprint() == LidarSickPoint._get_packed_fingerprint()
            self.points[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != LidarSickPoints._get_packed_fingerprint():
            raise ValueError("Decode error")
        return LidarSickPoints._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = LidarSickPoints()
        self.service = ZcmService._decode_one(buf)
        self.scan_number, self.scanner_height, self.points_count = struct.unpack(">idi", buf.read(16))
        self.points = []
        for i0 in range(self.points_count):
            self.points.append(LidarSickPoint._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if LidarSickPoints in parents: return 0
        newparents = parents + [LidarSickPoints]
        tmphash = (0x36102ef621ac0597+ ZcmService._get_hash_recursive(newparents)+ LidarSickPoint._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if LidarSickPoints._packed_fingerprint is None:
            LidarSickPoints._packed_fingerprint = struct.pack(">Q", LidarSickPoints._get_hash_recursive([]))
        return LidarSickPoints._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

