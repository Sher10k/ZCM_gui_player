// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmLidarVuPoint_h
#define _ZcmLidarVuPoint_h

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @mainpage Сообщения от Lidar Vu
 * Данный документ содержит описание сообщений для работы
 * с лидаром Lidar Vu8.
 *
 * @struct ZcmLidarVuPoint
 * @brief Содержит информацию о точке(объекте) обнаруженном устройством.
 * @var ZcmLidarVuPoint::channel        
 * @brief - номер канала (от 0 до 7)
 * @var ZcmLidarVuPoint::x  
 * @brief - координата по оси X (м) 
 * @var ZcmLidarVuPoint::y
 * @brief - координата по оси Y (м) 
 * @var ZcmLidarVuPoint::z
 * @brief - высота установки (м) 
 * @var ZcmLidarVuPoint::amplitude
 * @brief - характеристика. Чем больше тем сильнее отраженный сигнал
 * @var ZcmLidarVuPoint::flag_info
 * @brief - Информация о измерении: \n
 *                  0 - The detection is valid \n
 *                  1 - The detection is the result of object demerging \n
 *                  2 - The detection is saturated. \n 
 *                  
 *
 */
typedef struct _ZcmLidarVuPoint ZcmLidarVuPoint;
struct _ZcmLidarVuPoint
{
    int8_t     channel;
    float      x;
    float      y;
    float      z;
    float      amplitude;
    int8_t     flag_info;
};

/**
 * Create a deep copy of a ZcmLidarVuPoint.
 * When no longer needed, destroy it with ZcmLidarVuPoint_destroy()
 */
ZcmLidarVuPoint* ZcmLidarVuPoint_copy(const ZcmLidarVuPoint* to_copy);

/**
 * Destroy an instance of ZcmLidarVuPoint created by ZcmLidarVuPoint_copy()
 */
void ZcmLidarVuPoint_destroy(ZcmLidarVuPoint* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmLidarVuPoint_subscription_t ZcmLidarVuPoint_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmLidarVuPoint is received.
 */
typedef void(*ZcmLidarVuPoint_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmLidarVuPoint* msg, void* userdata);

/**
 * Publish a message of type ZcmLidarVuPoint using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmLidarVuPoint_publish(zcm_t* zcm, const char* channel, const ZcmLidarVuPoint* msg);

/**
 * Subscribe to messages of type ZcmLidarVuPoint using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmLidarVuPoint_unsubscribe.
 */
ZcmLidarVuPoint_subscription_t* ZcmLidarVuPoint_subscribe(zcm_t* zcm, const char* channel, ZcmLidarVuPoint_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmLidarVuPoint_subscribe()
 */
int ZcmLidarVuPoint_unsubscribe(zcm_t* zcm, ZcmLidarVuPoint_subscription_t* hid);
/**
 * Encode a message of type ZcmLidarVuPoint into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmLidarVuPoint_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmLidarVuPoint_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmLidarVuPoint* p);

/**
 * Decode a message of type ZcmLidarVuPoint from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmLidarVuPoint_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmLidarVuPoint_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmLidarVuPoint* msg);

/**
 * Release resources allocated by ZcmLidarVuPoint_decode()
 * @return 0
 */
int ZcmLidarVuPoint_decode_cleanup(ZcmLidarVuPoint* p);

/**
 * Check how many bytes are required to encode a message of type ZcmLidarVuPoint
 */
uint32_t ZcmLidarVuPoint_encoded_size(const ZcmLidarVuPoint* p);
uint32_t ZcmLidarVuPoint_struct_size(void);
uint32_t ZcmLidarVuPoint_num_fields(void);
int      ZcmLidarVuPoint_get_field(const ZcmLidarVuPoint* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmLidarVuPoint_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmLidarVuPoint_get_hash(void);
uint64_t __ZcmLidarVuPoint_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmLidarVuPoint_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmLidarVuPoint* p, uint32_t elements);
int      __ZcmLidarVuPoint_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmLidarVuPoint* p, uint32_t elements);
int      __ZcmLidarVuPoint_decode_array_cleanup(ZcmLidarVuPoint* p, uint32_t elements);
uint32_t __ZcmLidarVuPoint_encoded_array_size(const ZcmLidarVuPoint* p, uint32_t elements);
uint32_t __ZcmLidarVuPoint_clone_array(const ZcmLidarVuPoint* p, ZcmLidarVuPoint* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
