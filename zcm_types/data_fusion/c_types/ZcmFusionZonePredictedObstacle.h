// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmFusionZonePredictedObstacle_h
#define _ZcmFusionZonePredictedObstacle_h

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @mainpage Сообщения взаимодействия с модулем data_fusion (fusion)
 *
 * @struct ZcmFusionZonePredictedObstacle
 * @brief Препятствие в одной зоне контроля
 * @var ZcmClusterAttributes::obstacle_type
 * @brief - класс объекта:
 *                  OBSTACLE_TYPE_UNKNOWN
 *                  OBSTACLE_TYPE_HUMAN
 *                  OBSTACLE_TYPE_TRAFFIC_LIGHT
 *                  OBSTACLE_TYPE_CAR
 * @var ZcmFusionZonePredictedObstacle::zone
 * @brief - идентификатор зоны
 * @var ZcmFusionZonePredictedObstacle::distance
 * @brief - расстояние до препятствия, метр
 *
 */
typedef struct _ZcmFusionZonePredictedObstacle ZcmFusionZonePredictedObstacle;
struct _ZcmFusionZonePredictedObstacle
{
    int8_t     zone;
    int8_t     obstacle_type;
    double     distance;
};

/**
 * Create a deep copy of a ZcmFusionZonePredictedObstacle.
 * When no longer needed, destroy it with ZcmFusionZonePredictedObstacle_destroy()
 */
ZcmFusionZonePredictedObstacle* ZcmFusionZonePredictedObstacle_copy(const ZcmFusionZonePredictedObstacle* to_copy);

/**
 * Destroy an instance of ZcmFusionZonePredictedObstacle created by ZcmFusionZonePredictedObstacle_copy()
 */
void ZcmFusionZonePredictedObstacle_destroy(ZcmFusionZonePredictedObstacle* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmFusionZonePredictedObstacle_subscription_t ZcmFusionZonePredictedObstacle_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmFusionZonePredictedObstacle is received.
 */
typedef void(*ZcmFusionZonePredictedObstacle_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmFusionZonePredictedObstacle* msg, void* userdata);

/**
 * Publish a message of type ZcmFusionZonePredictedObstacle using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmFusionZonePredictedObstacle_publish(zcm_t* zcm, const char* channel, const ZcmFusionZonePredictedObstacle* msg);

/**
 * Subscribe to messages of type ZcmFusionZonePredictedObstacle using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmFusionZonePredictedObstacle_unsubscribe.
 */
ZcmFusionZonePredictedObstacle_subscription_t* ZcmFusionZonePredictedObstacle_subscribe(zcm_t* zcm, const char* channel, ZcmFusionZonePredictedObstacle_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmFusionZonePredictedObstacle_subscribe()
 */
int ZcmFusionZonePredictedObstacle_unsubscribe(zcm_t* zcm, ZcmFusionZonePredictedObstacle_subscription_t* hid);
/**
 * Encode a message of type ZcmFusionZonePredictedObstacle into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmFusionZonePredictedObstacle_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmFusionZonePredictedObstacle_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmFusionZonePredictedObstacle* p);

/**
 * Decode a message of type ZcmFusionZonePredictedObstacle from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmFusionZonePredictedObstacle_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmFusionZonePredictedObstacle_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmFusionZonePredictedObstacle* msg);

/**
 * Release resources allocated by ZcmFusionZonePredictedObstacle_decode()
 * @return 0
 */
int ZcmFusionZonePredictedObstacle_decode_cleanup(ZcmFusionZonePredictedObstacle* p);

/**
 * Check how many bytes are required to encode a message of type ZcmFusionZonePredictedObstacle
 */
uint32_t ZcmFusionZonePredictedObstacle_encoded_size(const ZcmFusionZonePredictedObstacle* p);
uint32_t ZcmFusionZonePredictedObstacle_struct_size(void);
uint32_t ZcmFusionZonePredictedObstacle_num_fields(void);
int      ZcmFusionZonePredictedObstacle_get_field(const ZcmFusionZonePredictedObstacle* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmFusionZonePredictedObstacle_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmFusionZonePredictedObstacle_get_hash(void);
uint64_t __ZcmFusionZonePredictedObstacle_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmFusionZonePredictedObstacle_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmFusionZonePredictedObstacle* p, uint32_t elements);
int      __ZcmFusionZonePredictedObstacle_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmFusionZonePredictedObstacle* p, uint32_t elements);
int      __ZcmFusionZonePredictedObstacle_decode_array_cleanup(ZcmFusionZonePredictedObstacle* p, uint32_t elements);
uint32_t __ZcmFusionZonePredictedObstacle_encoded_array_size(const ZcmFusionZonePredictedObstacle* p, uint32_t elements);
uint32_t __ZcmFusionZonePredictedObstacle_clone_array(const ZcmFusionZonePredictedObstacle* p, ZcmFusionZonePredictedObstacle* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
