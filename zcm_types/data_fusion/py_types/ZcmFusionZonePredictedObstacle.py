"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class ZcmFusionZonePredictedObstacle(object):
    __slots__ = ["zone", "obstacle_type", "distance"]

    def __init__(self):
        self.zone = 0
        self.obstacle_type = 0
        self.distance = 0.0

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmFusionZonePredictedObstacle._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bbd", self.zone, self.obstacle_type, self.distance))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmFusionZonePredictedObstacle._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmFusionZonePredictedObstacle._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmFusionZonePredictedObstacle()
        self.zone, self.obstacle_type, self.distance = struct.unpack(">bbd", buf.read(10))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmFusionZonePredictedObstacle in parents: return 0
        tmphash = (0xebccf9b94aa4d5ed) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmFusionZonePredictedObstacle._packed_fingerprint is None:
            ZcmFusionZonePredictedObstacle._packed_fingerprint = struct.pack(">Q", ZcmFusionZonePredictedObstacle._get_hash_recursive([]))
        return ZcmFusionZonePredictedObstacle._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

