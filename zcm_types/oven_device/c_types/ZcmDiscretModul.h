// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmDiscretModul_h
#define _ZcmDiscretModul_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
#include "ZcmObjectStatus.h"
/**
 * @struct ZcmDiscretModul 
 * @brief - Статус вх/вых контактов устройства
 * @struct ZcmDiscretModul::service
 * @brief - Служебное сообщение
 *  
 * @var ZcmDiscretModul::object_count
 * @brief - Количество котролируемых объектов(реле)
 * @struct ZcmDiscretModul::object
 * @brief - Статус объекта
 * @vart ZcmReleStatus::object_rw
 * @brief - тип объектов для чтения(вх. реле)/записи(вых. реле) (true/false)
 *  
 *
 */
typedef struct _ZcmDiscretModul ZcmDiscretModul;
struct _ZcmDiscretModul
{
    ZcmService service;
    int8_t     object_count;
    ZcmObjectStatus *object;
    int8_t     object_rw;
};

/**
 * Create a deep copy of a ZcmDiscretModul.
 * When no longer needed, destroy it with ZcmDiscretModul_destroy()
 */
ZcmDiscretModul* ZcmDiscretModul_copy(const ZcmDiscretModul* to_copy);

/**
 * Destroy an instance of ZcmDiscretModul created by ZcmDiscretModul_copy()
 */
void ZcmDiscretModul_destroy(ZcmDiscretModul* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmDiscretModul_subscription_t ZcmDiscretModul_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmDiscretModul is received.
 */
typedef void(*ZcmDiscretModul_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmDiscretModul* msg, void* userdata);

/**
 * Publish a message of type ZcmDiscretModul using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmDiscretModul_publish(zcm_t* zcm, const char* channel, const ZcmDiscretModul* msg);

/**
 * Subscribe to messages of type ZcmDiscretModul using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmDiscretModul_unsubscribe.
 */
ZcmDiscretModul_subscription_t* ZcmDiscretModul_subscribe(zcm_t* zcm, const char* channel, ZcmDiscretModul_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmDiscretModul_subscribe()
 */
int ZcmDiscretModul_unsubscribe(zcm_t* zcm, ZcmDiscretModul_subscription_t* hid);
/**
 * Encode a message of type ZcmDiscretModul into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmDiscretModul_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmDiscretModul_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmDiscretModul* p);

/**
 * Decode a message of type ZcmDiscretModul from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmDiscretModul_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmDiscretModul_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmDiscretModul* msg);

/**
 * Release resources allocated by ZcmDiscretModul_decode()
 * @return 0
 */
int ZcmDiscretModul_decode_cleanup(ZcmDiscretModul* p);

/**
 * Check how many bytes are required to encode a message of type ZcmDiscretModul
 */
uint32_t ZcmDiscretModul_encoded_size(const ZcmDiscretModul* p);
uint32_t ZcmDiscretModul_struct_size(void);
uint32_t ZcmDiscretModul_num_fields(void);
int      ZcmDiscretModul_get_field(const ZcmDiscretModul* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmDiscretModul_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmDiscretModul_get_hash(void);
uint64_t __ZcmDiscretModul_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmDiscretModul_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmDiscretModul* p, uint32_t elements);
int      __ZcmDiscretModul_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmDiscretModul* p, uint32_t elements);
int      __ZcmDiscretModul_decode_array_cleanup(ZcmDiscretModul* p, uint32_t elements);
uint32_t __ZcmDiscretModul_encoded_array_size(const ZcmDiscretModul* p, uint32_t elements);
uint32_t __ZcmDiscretModul_clone_array(const ZcmDiscretModul* p, ZcmDiscretModul* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
