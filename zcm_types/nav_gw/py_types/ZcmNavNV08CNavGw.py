"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmNavNV08CNavigationState import ZcmNavNV08CNavigationState

from ZcmNavNV08CErrorVector import ZcmNavNV08CErrorVector

from ZcmNavNV08CDopVector import ZcmNavNV08CDopVector

from ZcmService import ZcmService

from ZcmNavNV08CVelocityVector import ZcmNavNV08CVelocityVector

class ZcmNavNV08CNavGw(object):
    __slots__ = ["service", "velocityVector", "errorVector", "dopVector", "navigationState", "speed", "azimuth", "x", "y", "z", "msec"]

    def __init__(self):
        self.service = ZcmService()
        self.velocityVector = ZcmNavNV08CVelocityVector()
        self.errorVector = ZcmNavNV08CErrorVector()
        self.dopVector = ZcmNavNV08CDopVector()
        self.navigationState = ZcmNavNV08CNavigationState()
        self.speed = 0.0
        self.azimuth = 0.0
        self.x = 0.0
        self.y = 0.0
        self.z = 0.0
        self.msec = 0

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmNavNV08CNavGw._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        assert self.velocityVector._get_packed_fingerprint() == ZcmNavNV08CVelocityVector._get_packed_fingerprint()
        self.velocityVector._encode_one(buf)
        assert self.errorVector._get_packed_fingerprint() == ZcmNavNV08CErrorVector._get_packed_fingerprint()
        self.errorVector._encode_one(buf)
        assert self.dopVector._get_packed_fingerprint() == ZcmNavNV08CDopVector._get_packed_fingerprint()
        self.dopVector._encode_one(buf)
        assert self.navigationState._get_packed_fingerprint() == ZcmNavNV08CNavigationState._get_packed_fingerprint()
        self.navigationState._encode_one(buf)
        buf.write(struct.pack(">dddddq", self.speed, self.azimuth, self.x, self.y, self.z, self.msec))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmNavNV08CNavGw._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmNavNV08CNavGw._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmNavNV08CNavGw()
        self.service = ZcmService._decode_one(buf)
        self.velocityVector = ZcmNavNV08CVelocityVector._decode_one(buf)
        self.errorVector = ZcmNavNV08CErrorVector._decode_one(buf)
        self.dopVector = ZcmNavNV08CDopVector._decode_one(buf)
        self.navigationState = ZcmNavNV08CNavigationState._decode_one(buf)
        self.speed, self.azimuth, self.x, self.y, self.z, self.msec = struct.unpack(">dddddq", buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmNavNV08CNavGw in parents: return 0
        newparents = parents + [ZcmNavNV08CNavGw]
        tmphash = (0xf4fdaf05f36c0fa5+ ZcmService._get_hash_recursive(newparents)+ ZcmNavNV08CVelocityVector._get_hash_recursive(newparents)+ ZcmNavNV08CErrorVector._get_hash_recursive(newparents)+ ZcmNavNV08CDopVector._get_hash_recursive(newparents)+ ZcmNavNV08CNavigationState._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmNavNV08CNavGw._packed_fingerprint is None:
            ZcmNavNV08CNavGw._packed_fingerprint = struct.pack(">Q", ZcmNavNV08CNavGw._get_hash_recursive([]))
        return ZcmNavNV08CNavGw._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

