// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmNavNV08CNavGw_h
#define _ZcmNavNV08CNavGw_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
#include "ZcmNavNV08CVelocityVector.h"
#include "ZcmNavNV08CErrorVector.h"
#include "ZcmNavNV08CDopVector.h"
#include "ZcmNavNV08CNavigationState.h"
/**
 * @struct ZcmNavNV08CNavGw
 * @brief Данные от навигатора
 * @var ZcmNavNV08CNavGw::velocityVector
 * @brief - скорость по трем координатам.
 *          
 * @var ZcmNavNV08CNavGw::errorVector  
 * @brief - СКО по координатам и скорости.
 *          
 * @var ZcmNavNV08CNavGw::dopVector         
 * @brief - значения DOP.
 *          
 * @var ZcmNavNV08CNavGw::navigationState         
 * @brief - состояние навигатора.
 *          
 * @var ZcmNavNV08CUtmCoord  utmCoordinates;
 * @brief - UTM координата
 * @var ZcmNavNV08CGeographicCoord geographicCoordinates;
 * @brief - географическая координата
 * @var ZcmNavNV08CNavGw::speed (м/с)
 * @brief - скорость.
 *          
 * @var ZcmNavNV08CNavGw::azimuth (градусы)
 * @brief - азимут.
 *          
 * @var ZcmNavNV08CNavGw::x         
 * @brief - координата X.
 *          
 * @var ZcmNavNV08CNavGw::y         
 * @brief - координата Y.
 *          
 * @var ZcmNavNV08CNavGw::z
 * @brief - координата Z.
 *          
 * @var ZcmNavNV08CNavGw::msec       
 * @brief - время от навигатора, миллисекунды от начала эпохи UNIX.
 *
 */
typedef struct _ZcmNavNV08CNavGw ZcmNavNV08CNavGw;
struct _ZcmNavNV08CNavGw
{
    ZcmService service;
    ZcmNavNV08CVelocityVector velocityVector;
    ZcmNavNV08CErrorVector errorVector;
    ZcmNavNV08CDopVector dopVector;
    ZcmNavNV08CNavigationState navigationState;
    double     speed;
    double     azimuth;
    double     x;
    double     y;
    double     z;
    int64_t    msec;
};

/**
 * Create a deep copy of a ZcmNavNV08CNavGw.
 * When no longer needed, destroy it with ZcmNavNV08CNavGw_destroy()
 */
ZcmNavNV08CNavGw* ZcmNavNV08CNavGw_copy(const ZcmNavNV08CNavGw* to_copy);

/**
 * Destroy an instance of ZcmNavNV08CNavGw created by ZcmNavNV08CNavGw_copy()
 */
void ZcmNavNV08CNavGw_destroy(ZcmNavNV08CNavGw* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmNavNV08CNavGw_subscription_t ZcmNavNV08CNavGw_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmNavNV08CNavGw is received.
 */
typedef void(*ZcmNavNV08CNavGw_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmNavNV08CNavGw* msg, void* userdata);

/**
 * Publish a message of type ZcmNavNV08CNavGw using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmNavNV08CNavGw_publish(zcm_t* zcm, const char* channel, const ZcmNavNV08CNavGw* msg);

/**
 * Subscribe to messages of type ZcmNavNV08CNavGw using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmNavNV08CNavGw_unsubscribe.
 */
ZcmNavNV08CNavGw_subscription_t* ZcmNavNV08CNavGw_subscribe(zcm_t* zcm, const char* channel, ZcmNavNV08CNavGw_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmNavNV08CNavGw_subscribe()
 */
int ZcmNavNV08CNavGw_unsubscribe(zcm_t* zcm, ZcmNavNV08CNavGw_subscription_t* hid);
/**
 * Encode a message of type ZcmNavNV08CNavGw into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmNavNV08CNavGw_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmNavNV08CNavGw_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmNavNV08CNavGw* p);

/**
 * Decode a message of type ZcmNavNV08CNavGw from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmNavNV08CNavGw_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmNavNV08CNavGw_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmNavNV08CNavGw* msg);

/**
 * Release resources allocated by ZcmNavNV08CNavGw_decode()
 * @return 0
 */
int ZcmNavNV08CNavGw_decode_cleanup(ZcmNavNV08CNavGw* p);

/**
 * Check how many bytes are required to encode a message of type ZcmNavNV08CNavGw
 */
uint32_t ZcmNavNV08CNavGw_encoded_size(const ZcmNavNV08CNavGw* p);
uint32_t ZcmNavNV08CNavGw_struct_size(void);
uint32_t ZcmNavNV08CNavGw_num_fields(void);
int      ZcmNavNV08CNavGw_get_field(const ZcmNavNV08CNavGw* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmNavNV08CNavGw_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmNavNV08CNavGw_get_hash(void);
uint64_t __ZcmNavNV08CNavGw_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmNavNV08CNavGw_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmNavNV08CNavGw* p, uint32_t elements);
int      __ZcmNavNV08CNavGw_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmNavNV08CNavGw* p, uint32_t elements);
int      __ZcmNavNV08CNavGw_decode_array_cleanup(ZcmNavNV08CNavGw* p, uint32_t elements);
uint32_t __ZcmNavNV08CNavGw_encoded_array_size(const ZcmNavNV08CNavGw* p, uint32_t elements);
uint32_t __ZcmNavNV08CNavGw_clone_array(const ZcmNavNV08CNavGw* p, ZcmNavNV08CNavGw* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
