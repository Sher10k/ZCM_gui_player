// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmNavNV08CErrorVector_h
#define _ZcmNavNV08CErrorVector_h

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @struct ZcmNavNV08CErrorVector
 * @brief Погрешность по каждой координате и скорости для каждой координаты
 * @var ZcmNavNV08CErrorVector::stdX
 * @brief - СКО по координате X.
 *          
 * @var ZcmNavNV08CErrorVector::stdY  
 * @brief - СКО по координате Y.
 *          
 * @var ZcmNavNV08CErrorVector::stdZ         
 * @brief - СКО по координате Z.
 * @var ZcmNavNV08CErrorVector::stdXSpeed         
 * @brief - СКО скорости по координате X.
 * @var ZcmNavNV08CErrorVector::stdYSpeed         
 * @brief - СКО по скорости по координате Y.
 * @var ZcmNavNV08CErrorVector::stdZSpeed         
 * @brief - СКО по скорости по координате Z.
 *
 */
typedef struct _ZcmNavNV08CErrorVector ZcmNavNV08CErrorVector;
struct _ZcmNavNV08CErrorVector
{
    double     stdX;
    double     stdY;
    double     stdZ;
    double     stdXSpeed;
    double     stdYSpeed;
    double     stdZSpeed;
};

/**
 * Create a deep copy of a ZcmNavNV08CErrorVector.
 * When no longer needed, destroy it with ZcmNavNV08CErrorVector_destroy()
 */
ZcmNavNV08CErrorVector* ZcmNavNV08CErrorVector_copy(const ZcmNavNV08CErrorVector* to_copy);

/**
 * Destroy an instance of ZcmNavNV08CErrorVector created by ZcmNavNV08CErrorVector_copy()
 */
void ZcmNavNV08CErrorVector_destroy(ZcmNavNV08CErrorVector* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmNavNV08CErrorVector_subscription_t ZcmNavNV08CErrorVector_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmNavNV08CErrorVector is received.
 */
typedef void(*ZcmNavNV08CErrorVector_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmNavNV08CErrorVector* msg, void* userdata);

/**
 * Publish a message of type ZcmNavNV08CErrorVector using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmNavNV08CErrorVector_publish(zcm_t* zcm, const char* channel, const ZcmNavNV08CErrorVector* msg);

/**
 * Subscribe to messages of type ZcmNavNV08CErrorVector using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmNavNV08CErrorVector_unsubscribe.
 */
ZcmNavNV08CErrorVector_subscription_t* ZcmNavNV08CErrorVector_subscribe(zcm_t* zcm, const char* channel, ZcmNavNV08CErrorVector_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmNavNV08CErrorVector_subscribe()
 */
int ZcmNavNV08CErrorVector_unsubscribe(zcm_t* zcm, ZcmNavNV08CErrorVector_subscription_t* hid);
/**
 * Encode a message of type ZcmNavNV08CErrorVector into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmNavNV08CErrorVector_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmNavNV08CErrorVector_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmNavNV08CErrorVector* p);

/**
 * Decode a message of type ZcmNavNV08CErrorVector from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmNavNV08CErrorVector_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmNavNV08CErrorVector_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmNavNV08CErrorVector* msg);

/**
 * Release resources allocated by ZcmNavNV08CErrorVector_decode()
 * @return 0
 */
int ZcmNavNV08CErrorVector_decode_cleanup(ZcmNavNV08CErrorVector* p);

/**
 * Check how many bytes are required to encode a message of type ZcmNavNV08CErrorVector
 */
uint32_t ZcmNavNV08CErrorVector_encoded_size(const ZcmNavNV08CErrorVector* p);
uint32_t ZcmNavNV08CErrorVector_struct_size(void);
uint32_t ZcmNavNV08CErrorVector_num_fields(void);
int      ZcmNavNV08CErrorVector_get_field(const ZcmNavNV08CErrorVector* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmNavNV08CErrorVector_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmNavNV08CErrorVector_get_hash(void);
uint64_t __ZcmNavNV08CErrorVector_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmNavNV08CErrorVector_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmNavNV08CErrorVector* p, uint32_t elements);
int      __ZcmNavNV08CErrorVector_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmNavNV08CErrorVector* p, uint32_t elements);
int      __ZcmNavNV08CErrorVector_decode_array_cleanup(ZcmNavNV08CErrorVector* p, uint32_t elements);
uint32_t __ZcmNavNV08CErrorVector_encoded_array_size(const ZcmNavNV08CErrorVector* p, uint32_t elements);
uint32_t __ZcmNavNV08CErrorVector_clone_array(const ZcmNavNV08CErrorVector* p, ZcmNavNV08CErrorVector* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
