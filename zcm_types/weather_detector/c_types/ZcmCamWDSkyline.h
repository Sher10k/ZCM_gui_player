// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmCamWDSkyline_h
#define _ZcmCamWDSkyline_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
#include "ZcmCameraBaslerImagePresentation.h"
#include "ZcmCameraBaslerImagePresentation.h"
#include "ZcmCamWDSkylinePoint.h"
#include "ZcmCamWDSkylinePoint.h"
/**
 * @struct ZcmCamWDSkyline
 * @brief Содержит информацию об обнаруженной линии горизонта,
 * а также разделенном на 2 части входным изображением.
 * @var ZcmCamWDSkyline::top_image
 * @brief - область изображения выше средней линии горизонта.
 * @var ZcmCamWDSkyline::bottom_image
 * @brief - область изображения ниже средней линии горизонта.
 * @var ZcmCamWDSkyline::sky_average_line
 * @brief - средняя линия горизонта (усредненная от sky_poly_line).
 * Если линия не обнаружена, sky_average_line будет представлена 
 * двумя точками (0, 0) и (image::width - 1, 0).
 * @var ZcmCamWDSkyline::point_count
 * @brief - число точек, описывающих кривую линии горизонта.
 * Если линия не обнаружена, значению point_count присваивается 2.
 * @var ZcmCamWDSkyline::sky_poly_line
 * @brief - точки кривой, описывающей линию горизонта.
 * Если линия не обнаружена, sky_poly_line будет представлена 
 * двумя точками (0, 0) и (image::width - 1, 0).
 *
 */
typedef struct _ZcmCamWDSkyline ZcmCamWDSkyline;
struct _ZcmCamWDSkyline
{
    ZcmService service;
    ZcmCameraBaslerImagePresentation top_image;
    ZcmCameraBaslerImagePresentation bottom_image;
    ZcmCamWDSkylinePoint sky_average_line[2];
    int32_t    point_count;
    ZcmCamWDSkylinePoint *sky_poly_line;
};

/**
 * Create a deep copy of a ZcmCamWDSkyline.
 * When no longer needed, destroy it with ZcmCamWDSkyline_destroy()
 */
ZcmCamWDSkyline* ZcmCamWDSkyline_copy(const ZcmCamWDSkyline* to_copy);

/**
 * Destroy an instance of ZcmCamWDSkyline created by ZcmCamWDSkyline_copy()
 */
void ZcmCamWDSkyline_destroy(ZcmCamWDSkyline* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmCamWDSkyline_subscription_t ZcmCamWDSkyline_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmCamWDSkyline is received.
 */
typedef void(*ZcmCamWDSkyline_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmCamWDSkyline* msg, void* userdata);

/**
 * Publish a message of type ZcmCamWDSkyline using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmCamWDSkyline_publish(zcm_t* zcm, const char* channel, const ZcmCamWDSkyline* msg);

/**
 * Subscribe to messages of type ZcmCamWDSkyline using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmCamWDSkyline_unsubscribe.
 */
ZcmCamWDSkyline_subscription_t* ZcmCamWDSkyline_subscribe(zcm_t* zcm, const char* channel, ZcmCamWDSkyline_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmCamWDSkyline_subscribe()
 */
int ZcmCamWDSkyline_unsubscribe(zcm_t* zcm, ZcmCamWDSkyline_subscription_t* hid);
/**
 * Encode a message of type ZcmCamWDSkyline into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmCamWDSkyline_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmCamWDSkyline_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmCamWDSkyline* p);

/**
 * Decode a message of type ZcmCamWDSkyline from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmCamWDSkyline_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmCamWDSkyline_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmCamWDSkyline* msg);

/**
 * Release resources allocated by ZcmCamWDSkyline_decode()
 * @return 0
 */
int ZcmCamWDSkyline_decode_cleanup(ZcmCamWDSkyline* p);

/**
 * Check how many bytes are required to encode a message of type ZcmCamWDSkyline
 */
uint32_t ZcmCamWDSkyline_encoded_size(const ZcmCamWDSkyline* p);
uint32_t ZcmCamWDSkyline_struct_size(void);
uint32_t ZcmCamWDSkyline_num_fields(void);
int      ZcmCamWDSkyline_get_field(const ZcmCamWDSkyline* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmCamWDSkyline_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmCamWDSkyline_get_hash(void);
uint64_t __ZcmCamWDSkyline_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmCamWDSkyline_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmCamWDSkyline* p, uint32_t elements);
int      __ZcmCamWDSkyline_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmCamWDSkyline* p, uint32_t elements);
int      __ZcmCamWDSkyline_decode_array_cleanup(ZcmCamWDSkyline* p, uint32_t elements);
uint32_t __ZcmCamWDSkyline_encoded_array_size(const ZcmCamWDSkyline* p, uint32_t elements);
uint32_t __ZcmCamWDSkyline_clone_array(const ZcmCamWDSkyline* p, ZcmCamWDSkyline* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
