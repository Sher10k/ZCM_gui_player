// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmCamWDGlarePoint_h
#define _ZcmCamWDGlarePoint_h

#ifdef __cplusplus
extern "C" {
#endif

/**
 * -------------------------------------------------------------------------------------
 * @struct ZcmCamWDGlarePoint
 * @brief Информация о координате точки (пикселл на изображении), 
 * являющейся центром блика на изображении, а также о 
 * радиусе, площади и показателе яркости.
 * @var ZcmCamWDGlarePoint::x
 * @brief - координата (пикселл) центра блика по оси X изображения. 
 * Принимает значения от 0 до image::width - 1 (входного изображения).
 * @var ZcmCamWDGlarePoint::y
 * @brief - координата (пикселл) центра блика по оси Y изображения. 
 * Принимает значения от 0 до image::height - 1 (входного изображения).
 * @var ZcmCamWDGlarePoint::radius
 * @brief - радиус блика на камере. 
 * Принимает значения от 0 до image::height / 2 или 
 * от 0 до image::width / 2 (входного изображения).
 * @var ZcmCamWDGlarePoint::area
 * @brief - площадь блика на камере. 
 * Принимает значения от 0 до image::total() (входного изображения).
 * @var ZcmCamWDGlarePoint::intensity
 * @brief - показатель яркости блика. 
 * Принимает значения от 0 до 255 (цветовой канал Value палитры HSV).
 *
 */
typedef struct _ZcmCamWDGlarePoint ZcmCamWDGlarePoint;
struct _ZcmCamWDGlarePoint
{
    int32_t    x;
    int32_t    y;
    int32_t    radius;
    int32_t    area;
    int8_t     intensity;
};

/**
 * Create a deep copy of a ZcmCamWDGlarePoint.
 * When no longer needed, destroy it with ZcmCamWDGlarePoint_destroy()
 */
ZcmCamWDGlarePoint* ZcmCamWDGlarePoint_copy(const ZcmCamWDGlarePoint* to_copy);

/**
 * Destroy an instance of ZcmCamWDGlarePoint created by ZcmCamWDGlarePoint_copy()
 */
void ZcmCamWDGlarePoint_destroy(ZcmCamWDGlarePoint* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmCamWDGlarePoint_subscription_t ZcmCamWDGlarePoint_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmCamWDGlarePoint is received.
 */
typedef void(*ZcmCamWDGlarePoint_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmCamWDGlarePoint* msg, void* userdata);

/**
 * Publish a message of type ZcmCamWDGlarePoint using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmCamWDGlarePoint_publish(zcm_t* zcm, const char* channel, const ZcmCamWDGlarePoint* msg);

/**
 * Subscribe to messages of type ZcmCamWDGlarePoint using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmCamWDGlarePoint_unsubscribe.
 */
ZcmCamWDGlarePoint_subscription_t* ZcmCamWDGlarePoint_subscribe(zcm_t* zcm, const char* channel, ZcmCamWDGlarePoint_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmCamWDGlarePoint_subscribe()
 */
int ZcmCamWDGlarePoint_unsubscribe(zcm_t* zcm, ZcmCamWDGlarePoint_subscription_t* hid);
/**
 * Encode a message of type ZcmCamWDGlarePoint into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmCamWDGlarePoint_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmCamWDGlarePoint_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmCamWDGlarePoint* p);

/**
 * Decode a message of type ZcmCamWDGlarePoint from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmCamWDGlarePoint_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmCamWDGlarePoint_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmCamWDGlarePoint* msg);

/**
 * Release resources allocated by ZcmCamWDGlarePoint_decode()
 * @return 0
 */
int ZcmCamWDGlarePoint_decode_cleanup(ZcmCamWDGlarePoint* p);

/**
 * Check how many bytes are required to encode a message of type ZcmCamWDGlarePoint
 */
uint32_t ZcmCamWDGlarePoint_encoded_size(const ZcmCamWDGlarePoint* p);
uint32_t ZcmCamWDGlarePoint_struct_size(void);
uint32_t ZcmCamWDGlarePoint_num_fields(void);
int      ZcmCamWDGlarePoint_get_field(const ZcmCamWDGlarePoint* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmCamWDGlarePoint_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmCamWDGlarePoint_get_hash(void);
uint64_t __ZcmCamWDGlarePoint_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmCamWDGlarePoint_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmCamWDGlarePoint* p, uint32_t elements);
int      __ZcmCamWDGlarePoint_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmCamWDGlarePoint* p, uint32_t elements);
int      __ZcmCamWDGlarePoint_decode_array_cleanup(ZcmCamWDGlarePoint* p, uint32_t elements);
uint32_t __ZcmCamWDGlarePoint_encoded_array_size(const ZcmCamWDGlarePoint* p, uint32_t elements);
uint32_t __ZcmCamWDGlarePoint_clone_array(const ZcmCamWDGlarePoint* p, ZcmCamWDGlarePoint* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
