/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __ZcmCamWDSkyline_hpp__
#define __ZcmCamWDSkyline_hpp__

#include <vector>
#include "ZcmService.hpp"
#include "ZcmCameraBaslerImagePresentation.hpp"
#include "ZcmCameraBaslerImagePresentation.hpp"
#include "ZcmCamWDSkylinePoint.hpp"
#include "ZcmCamWDSkylinePoint.hpp"


/**
 * @struct ZcmCamWDSkyline
 * @brief Содержит информацию об обнаруженной линии горизонта,
 * а также разделенном на 2 части входным изображением.
 * @var ZcmCamWDSkyline::top_image
 * @brief - область изображения выше средней линии горизонта.
 * @var ZcmCamWDSkyline::bottom_image
 * @brief - область изображения ниже средней линии горизонта.
 * @var ZcmCamWDSkyline::sky_average_line
 * @brief - средняя линия горизонта (усредненная от sky_poly_line).
 * Если линия не обнаружена, sky_average_line будет представлена 
 * двумя точками (0, 0) и (image::width - 1, 0).
 * @var ZcmCamWDSkyline::point_count
 * @brief - число точек, описывающих кривую линии горизонта.
 * Если линия не обнаружена, значению point_count присваивается 2.
 * @var ZcmCamWDSkyline::sky_poly_line
 * @brief - точки кривой, описывающей линию горизонта.
 * Если линия не обнаружена, sky_poly_line будет представлена 
 * двумя точками (0, 0) и (image::width - 1, 0).
 *
 */
class ZcmCamWDSkyline
{
    public:
        ZcmService service;

        ZcmCameraBaslerImagePresentation top_image;

        ZcmCameraBaslerImagePresentation bottom_image;

        ZcmCamWDSkylinePoint sky_average_line[2];

        int32_t    point_count;

        std::vector< ZcmCamWDSkylinePoint > sky_poly_line;

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~ZcmCamWDSkyline() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ZcmCamWDSkyline"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int ZcmCamWDSkyline::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmCamWDSkyline::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmCamWDSkyline::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ZcmCamWDSkyline::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* ZcmCamWDSkyline::getTypeName()
{
    return "ZcmCamWDSkyline";
}

int ZcmCamWDSkyline::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->top_image._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->bottom_image._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < 2; ++a0) {
        thislen = this->sky_average_line[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->point_count, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < this->point_count; ++a0) {
        thislen = this->sky_poly_line[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    return pos;
}

int ZcmCamWDSkyline::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->top_image._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->bottom_image._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    for (int a0 = 0; a0 < 2; ++a0) {
        thislen = this->sky_average_line[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->point_count, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    this->sky_poly_line.resize(this->point_count);
    for (int a0 = 0; a0 < this->point_count; ++a0) {
        thislen = this->sky_poly_line[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(thislen < 0) return thislen; else pos += thislen;
    }

    return pos;
}

uint32_t ZcmCamWDSkyline::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += this->service._getEncodedSizeNoHash();
    enc_size += this->top_image._getEncodedSizeNoHash();
    enc_size += this->bottom_image._getEncodedSizeNoHash();
    for (int a0 = 0; a0 < 2; ++a0) {
        enc_size += this->sky_average_line[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->point_count; ++a0) {
        enc_size += this->sky_poly_line[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t ZcmCamWDSkyline::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == ZcmCamWDSkyline::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)ZcmCamWDSkyline::getHash };

    uint64_t hash = (uint64_t)0xf0d1cb609daa9de8LL +
         ZcmService::_computeHash(&cp) +
         ZcmCameraBaslerImagePresentation::_computeHash(&cp) +
         ZcmCameraBaslerImagePresentation::_computeHash(&cp) +
         ZcmCamWDSkylinePoint::_computeHash(&cp) +
         ZcmCamWDSkylinePoint::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
