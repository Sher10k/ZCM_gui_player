"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmStereoPairPoint2D import ZcmStereoPairPoint2D

class ZcmStereoPairObstacleObject(object):
    __slots__ = ["boundingBox", "generalPoint", "label", "probability", "max_height", "min_height", "is_moving"]

    def __init__(self):
        self.boundingBox = [ ZcmStereoPairPoint2D() for dim0 in range(4) ]
        self.generalPoint = ZcmStereoPairPoint2D()
        self.label = ""
        self.probability = 0.0
        self.max_height = 0.0
        self.min_height = 0.0
        self.is_moving = False

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmStereoPairObstacleObject._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        for i0 in range(4):
            assert self.boundingBox[i0]._get_packed_fingerprint() == ZcmStereoPairPoint2D._get_packed_fingerprint()
            self.boundingBox[i0]._encode_one(buf)
        assert self.generalPoint._get_packed_fingerprint() == ZcmStereoPairPoint2D._get_packed_fingerprint()
        self.generalPoint._encode_one(buf)
        __label_encoded = self.label.encode('utf-8')
        buf.write(struct.pack('>I', len(__label_encoded)+1))
        buf.write(__label_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">dddb", self.probability, self.max_height, self.min_height, self.is_moving))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmStereoPairObstacleObject._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmStereoPairObstacleObject._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmStereoPairObstacleObject()
        self.boundingBox = []
        for i0 in range(4):
            self.boundingBox.append(ZcmStereoPairPoint2D._decode_one(buf))
        self.generalPoint = ZcmStereoPairPoint2D._decode_one(buf)
        __label_len = struct.unpack('>I', buf.read(4))[0]
        self.label = buf.read(__label_len)[:-1].decode('utf-8', 'replace')
        self.probability, self.max_height, self.min_height = struct.unpack(">ddd", buf.read(24))
        self.is_moving = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmStereoPairObstacleObject in parents: return 0
        newparents = parents + [ZcmStereoPairObstacleObject]
        tmphash = (0x65e793110c5679fd+ ZcmStereoPairPoint2D._get_hash_recursive(newparents)+ ZcmStereoPairPoint2D._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmStereoPairObstacleObject._packed_fingerprint is None:
            ZcmStereoPairObstacleObject._packed_fingerprint = struct.pack(">Q", ZcmStereoPairObstacleObject._get_hash_recursive([]))
        return ZcmStereoPairObstacleObject._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

