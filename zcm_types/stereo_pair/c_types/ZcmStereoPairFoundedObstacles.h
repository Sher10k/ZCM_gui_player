// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmStereoPairFoundedObstacles_h
#define _ZcmStereoPairFoundedObstacles_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
#include "ZcmStereoPairObstacleObject.h"
/**
 * @struct ZcmStereoPairFoundedObstacles
 * @brief Сообщение содержит координаты точки относительно камеры
 * @var ZcmStereoPairFoundedObstacles::count
 * @brief - количество найденных препятствий
 * @var ZcmStereoPairFoundedObstacles::obstacles
 * @brief - список найденных препятствий
 *
 */
typedef struct _ZcmStereoPairFoundedObstacles ZcmStereoPairFoundedObstacles;
struct _ZcmStereoPairFoundedObstacles
{
    ZcmService service;
    int32_t    count;
    ZcmStereoPairObstacleObject *obstacles;
};

/**
 * Create a deep copy of a ZcmStereoPairFoundedObstacles.
 * When no longer needed, destroy it with ZcmStereoPairFoundedObstacles_destroy()
 */
ZcmStereoPairFoundedObstacles* ZcmStereoPairFoundedObstacles_copy(const ZcmStereoPairFoundedObstacles* to_copy);

/**
 * Destroy an instance of ZcmStereoPairFoundedObstacles created by ZcmStereoPairFoundedObstacles_copy()
 */
void ZcmStereoPairFoundedObstacles_destroy(ZcmStereoPairFoundedObstacles* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmStereoPairFoundedObstacles_subscription_t ZcmStereoPairFoundedObstacles_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmStereoPairFoundedObstacles is received.
 */
typedef void(*ZcmStereoPairFoundedObstacles_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmStereoPairFoundedObstacles* msg, void* userdata);

/**
 * Publish a message of type ZcmStereoPairFoundedObstacles using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmStereoPairFoundedObstacles_publish(zcm_t* zcm, const char* channel, const ZcmStereoPairFoundedObstacles* msg);

/**
 * Subscribe to messages of type ZcmStereoPairFoundedObstacles using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmStereoPairFoundedObstacles_unsubscribe.
 */
ZcmStereoPairFoundedObstacles_subscription_t* ZcmStereoPairFoundedObstacles_subscribe(zcm_t* zcm, const char* channel, ZcmStereoPairFoundedObstacles_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmStereoPairFoundedObstacles_subscribe()
 */
int ZcmStereoPairFoundedObstacles_unsubscribe(zcm_t* zcm, ZcmStereoPairFoundedObstacles_subscription_t* hid);
/**
 * Encode a message of type ZcmStereoPairFoundedObstacles into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmStereoPairFoundedObstacles_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmStereoPairFoundedObstacles_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmStereoPairFoundedObstacles* p);

/**
 * Decode a message of type ZcmStereoPairFoundedObstacles from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmStereoPairFoundedObstacles_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmStereoPairFoundedObstacles_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmStereoPairFoundedObstacles* msg);

/**
 * Release resources allocated by ZcmStereoPairFoundedObstacles_decode()
 * @return 0
 */
int ZcmStereoPairFoundedObstacles_decode_cleanup(ZcmStereoPairFoundedObstacles* p);

/**
 * Check how many bytes are required to encode a message of type ZcmStereoPairFoundedObstacles
 */
uint32_t ZcmStereoPairFoundedObstacles_encoded_size(const ZcmStereoPairFoundedObstacles* p);
uint32_t ZcmStereoPairFoundedObstacles_struct_size(void);
uint32_t ZcmStereoPairFoundedObstacles_num_fields(void);
int      ZcmStereoPairFoundedObstacles_get_field(const ZcmStereoPairFoundedObstacles* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmStereoPairFoundedObstacles_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmStereoPairFoundedObstacles_get_hash(void);
uint64_t __ZcmStereoPairFoundedObstacles_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmStereoPairFoundedObstacles_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmStereoPairFoundedObstacles* p, uint32_t elements);
int      __ZcmStereoPairFoundedObstacles_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmStereoPairFoundedObstacles* p, uint32_t elements);
int      __ZcmStereoPairFoundedObstacles_decode_array_cleanup(ZcmStereoPairFoundedObstacles* p, uint32_t elements);
uint32_t __ZcmStereoPairFoundedObstacles_encoded_array_size(const ZcmStereoPairFoundedObstacles* p, uint32_t elements);
uint32_t __ZcmStereoPairFoundedObstacles_clone_array(const ZcmStereoPairFoundedObstacles* p, ZcmStereoPairFoundedObstacles* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
