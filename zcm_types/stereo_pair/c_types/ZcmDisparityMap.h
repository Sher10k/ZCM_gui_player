// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmDisparityMap_h
#define _ZcmDisparityMap_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
#include "ZcmCameraBaslerJpegFrame.h"
/**
 * @struct ZcmDisparityMap
 * @brief Сообщение содержит информацию
 * @var jpeg_frame
 * @brief кадр левой камеры, которому соответствует данная карта диспаратности
 * @var height
 * @brief высота в пикселях карты диспаратности
 * @var width
 * @brief ширина в пикселях карты диспаратности
 * @var size
 * @brief количество пикселей в карте диспаратности
 * @var scale
 * @brief коэффициент, на который необходимо умножить карту диспаратности для получения реального значения
 * @var padding
 * @brief массив, содержащий значения отступов от верхней, првой, нижней, левой границ изображений соответственно.
 * Все значения приведены в пикселях
 * @var disp
 * @brief карта диспаратности в виде одномерного массива с глубиной 16 бит
 * @var R
 * @brief массив из трёх значений поворота камеры (в радианах) относительно линии горизонта, перпендикуляра к опорной поверхности и лучу в бесконечную плоскость кадра соответственно
 * @var T
 * @brief массив из трёх значений смещения камеры (в метрах) относительно нашего центра координат по горизонтальному смещению, вертикальному смещению и смещению в глубину соответственно
 * @var Q
 * @brief матрица реконструкции 4x4 (opencv perspective transformation matrix)
 *
 */
typedef struct _ZcmDisparityMap ZcmDisparityMap;
struct _ZcmDisparityMap
{
    ZcmService service;
    ZcmCameraBaslerJpegFrame jpeg_frame;
    int32_t    height;
    int32_t    width;
    int32_t    size;
    double     scale;
    int32_t    padding[4];
    int16_t    *disp;
    double     Q[16];
    double     R[3];
    double     T[3];
};

/**
 * Create a deep copy of a ZcmDisparityMap.
 * When no longer needed, destroy it with ZcmDisparityMap_destroy()
 */
ZcmDisparityMap* ZcmDisparityMap_copy(const ZcmDisparityMap* to_copy);

/**
 * Destroy an instance of ZcmDisparityMap created by ZcmDisparityMap_copy()
 */
void ZcmDisparityMap_destroy(ZcmDisparityMap* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmDisparityMap_subscription_t ZcmDisparityMap_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmDisparityMap is received.
 */
typedef void(*ZcmDisparityMap_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmDisparityMap* msg, void* userdata);

/**
 * Publish a message of type ZcmDisparityMap using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmDisparityMap_publish(zcm_t* zcm, const char* channel, const ZcmDisparityMap* msg);

/**
 * Subscribe to messages of type ZcmDisparityMap using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmDisparityMap_unsubscribe.
 */
ZcmDisparityMap_subscription_t* ZcmDisparityMap_subscribe(zcm_t* zcm, const char* channel, ZcmDisparityMap_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmDisparityMap_subscribe()
 */
int ZcmDisparityMap_unsubscribe(zcm_t* zcm, ZcmDisparityMap_subscription_t* hid);
/**
 * Encode a message of type ZcmDisparityMap into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmDisparityMap_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmDisparityMap_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmDisparityMap* p);

/**
 * Decode a message of type ZcmDisparityMap from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmDisparityMap_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmDisparityMap_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmDisparityMap* msg);

/**
 * Release resources allocated by ZcmDisparityMap_decode()
 * @return 0
 */
int ZcmDisparityMap_decode_cleanup(ZcmDisparityMap* p);

/**
 * Check how many bytes are required to encode a message of type ZcmDisparityMap
 */
uint32_t ZcmDisparityMap_encoded_size(const ZcmDisparityMap* p);
uint32_t ZcmDisparityMap_struct_size(void);
uint32_t ZcmDisparityMap_num_fields(void);
int      ZcmDisparityMap_get_field(const ZcmDisparityMap* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmDisparityMap_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmDisparityMap_get_hash(void);
uint64_t __ZcmDisparityMap_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmDisparityMap_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmDisparityMap* p, uint32_t elements);
int      __ZcmDisparityMap_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmDisparityMap* p, uint32_t elements);
int      __ZcmDisparityMap_decode_array_cleanup(ZcmDisparityMap* p, uint32_t elements);
uint32_t __ZcmDisparityMap_encoded_array_size(const ZcmDisparityMap* p, uint32_t elements);
uint32_t __ZcmDisparityMap_clone_array(const ZcmDisparityMap* p, ZcmDisparityMap* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
