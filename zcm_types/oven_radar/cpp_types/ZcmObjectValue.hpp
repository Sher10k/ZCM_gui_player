/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by zcm-gen
 **/

#include <zcm/zcm_coretypes.h>

#ifndef __ZcmObjectValue_hpp__
#define __ZcmObjectValue_hpp__

#include <string>
#include "ZcmService.hpp"


/**
 * =======================================================================================
 * @struct ZcmObjectValue
 * @brief - Значение объекта
 * @struct ZcmObjectValue::service
 * @brief - Время обновление измерения текущего объекта
 * @var ZcmObjectValue::object_name
 * @brief - Индификатор объекта соответствующий определенному входу, не более 20 символов
 * @var ZcmObjectValue::object_value
 * @brief - Значение объекта
 * @var ZcmObjectValue::valid_value
 * @brief - Валидность измерения - валидное(true)
 *
 */
class ZcmObjectValue
{
    public:
        ZcmService service;

        std::string object_name;

        float      object_value;

        int8_t     valid_value;

    public:
        /**
         * Destructs a message properly if anything inherits from it
        */
        virtual ~ZcmObjectValue() {}

        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void* buf, uint32_t offset, uint32_t maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline uint32_t getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void* buf, uint32_t offset, uint32_t maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "ZcmObjectValue"
         */
        inline static const char* getTypeName();

        // ZCM support functions. Users should not call these
        inline int      _encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const;
        inline uint32_t _getEncodedSizeNoHash() const;
        inline int      _decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen);
        inline static uint64_t _computeHash(const __zcm_hash_ptr* p);
};

int ZcmObjectValue::encode(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;
    int64_t hash = (int64_t)getHash();

    thislen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmObjectValue::decode(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmObjectValue::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t ZcmObjectValue::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* ZcmObjectValue::getTypeName()
{
    return "ZcmObjectValue";
}

int ZcmObjectValue::_encodeNoHash(void* buf, uint32_t offset, uint32_t maxlen) const
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    char* object_name_cstr = (char*) this->object_name.c_str();
    thislen = __string_encode_array(buf, offset + pos, maxlen - pos, &object_name_cstr, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->object_value, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_encode_array(buf, offset + pos, maxlen - pos, &this->valid_value, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int ZcmObjectValue::_decodeNoHash(const void* buf, uint32_t offset, uint32_t maxlen)
{
    uint32_t pos = 0;
    int thislen;

    thislen = this->service._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(thislen < 0) return thislen; else pos += thislen;

    int32_t __object_name_len__;
    thislen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__object_name_len__, 1);
    if(thislen < 0) return thislen; else pos += thislen;
    if((uint32_t)__object_name_len__ > maxlen - pos) return -1;
    this->object_name.assign(((const char*)buf) + offset + pos, __object_name_len__ - 1);
    pos += __object_name_len__;

    thislen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->object_value, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    thislen = __boolean_decode_array(buf, offset + pos, maxlen - pos, &this->valid_value, 1);
    if(thislen < 0) return thislen; else pos += thislen;

    return pos;
}

uint32_t ZcmObjectValue::_getEncodedSizeNoHash() const
{
    uint32_t enc_size = 0;
    enc_size += this->service._getEncodedSizeNoHash();
    enc_size += this->object_name.size() + 4 + 1;
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __boolean_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t ZcmObjectValue::_computeHash(const __zcm_hash_ptr* p)
{
    const __zcm_hash_ptr* fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == ZcmObjectValue::getHash)
            return 0;
    const __zcm_hash_ptr cp = { p, (void*)ZcmObjectValue::getHash };

    uint64_t hash = (uint64_t)0x7f26dc3cefd9ab6bLL +
         ZcmService::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
