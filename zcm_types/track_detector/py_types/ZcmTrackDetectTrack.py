"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmTrackDetectTrackPoint import ZcmTrackDetectTrackPoint

class ZcmTrackDetectTrack(object):
    __slots__ = ["point_count", "point", "quality", "coefficients"]

    def __init__(self):
        self.point_count = 0
        self.point = []
        self.quality = 0.0
        self.coefficients = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmTrackDetectTrack._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">h", self.point_count))
        for i0 in range(self.point_count):
            assert self.point[i0]._get_packed_fingerprint() == ZcmTrackDetectTrackPoint._get_packed_fingerprint()
            self.point[i0]._encode_one(buf)
        buf.write(struct.pack(">f", self.quality))
        buf.write(struct.pack('>3d', *self.coefficients[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmTrackDetectTrack._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmTrackDetectTrack._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmTrackDetectTrack()
        self.point_count = struct.unpack(">h", buf.read(2))[0]
        self.point = []
        for i0 in range(self.point_count):
            self.point.append(ZcmTrackDetectTrackPoint._decode_one(buf))
        self.quality = struct.unpack(">f", buf.read(4))[0]
        self.coefficients = struct.unpack('>3d', buf.read(24))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmTrackDetectTrack in parents: return 0
        newparents = parents + [ZcmTrackDetectTrack]
        tmphash = (0xa27be5e1729c31e1+ ZcmTrackDetectTrackPoint._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmTrackDetectTrack._packed_fingerprint is None:
            ZcmTrackDetectTrack._packed_fingerprint = struct.pack(">Q", ZcmTrackDetectTrack._get_hash_recursive([]))
        return ZcmTrackDetectTrack._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

