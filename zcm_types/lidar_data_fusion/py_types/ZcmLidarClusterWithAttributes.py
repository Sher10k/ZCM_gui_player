"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmClusterAttributes import ZcmClusterAttributes

from ZcmLidarClusterMediumPoint import ZcmLidarClusterMediumPoint

from ZcmLidarClusterBoundRect import ZcmLidarClusterBoundRect

class ZcmLidarClusterWithAttributes(object):
    __slots__ = ["clusterID", "attributes_exists", "medium_point", "bounding_rect", "attributes", "created"]

    def __init__(self):
        self.clusterID = 0
        self.attributes_exists = False
        self.medium_point = ZcmLidarClusterMediumPoint()
        self.bounding_rect = ZcmLidarClusterBoundRect()
        self.attributes = ZcmClusterAttributes()
        self.created = 0

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmLidarClusterWithAttributes._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">ib", self.clusterID, self.attributes_exists))
        assert self.medium_point._get_packed_fingerprint() == ZcmLidarClusterMediumPoint._get_packed_fingerprint()
        self.medium_point._encode_one(buf)
        assert self.bounding_rect._get_packed_fingerprint() == ZcmLidarClusterBoundRect._get_packed_fingerprint()
        self.bounding_rect._encode_one(buf)
        assert self.attributes._get_packed_fingerprint() == ZcmClusterAttributes._get_packed_fingerprint()
        self.attributes._encode_one(buf)
        buf.write(struct.pack(">q", self.created))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmLidarClusterWithAttributes._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmLidarClusterWithAttributes._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmLidarClusterWithAttributes()
        self.clusterID = struct.unpack(">i", buf.read(4))[0]
        self.attributes_exists = bool(struct.unpack('b', buf.read(1))[0])
        self.medium_point = ZcmLidarClusterMediumPoint._decode_one(buf)
        self.bounding_rect = ZcmLidarClusterBoundRect._decode_one(buf)
        self.attributes = ZcmClusterAttributes._decode_one(buf)
        self.created = struct.unpack(">q", buf.read(8))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmLidarClusterWithAttributes in parents: return 0
        newparents = parents + [ZcmLidarClusterWithAttributes]
        tmphash = (0x52fe4cbe73dc3f66+ ZcmLidarClusterMediumPoint._get_hash_recursive(newparents)+ ZcmLidarClusterBoundRect._get_hash_recursive(newparents)+ ZcmClusterAttributes._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmLidarClusterWithAttributes._packed_fingerprint is None:
            ZcmLidarClusterWithAttributes._packed_fingerprint = struct.pack(">Q", ZcmLidarClusterWithAttributes._get_hash_recursive([]))
        return ZcmLidarClusterWithAttributes._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

