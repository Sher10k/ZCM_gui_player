"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmLidarClusterWithAttributes import ZcmLidarClusterWithAttributes

from ZcmService import ZcmService

class ZcmLidarClusterWithAttributesList(object):
    __slots__ = ["service", "clustersCount", "scanNumber", "scanClusters"]

    ZONE_RED = 1
    ZONE_YELLOW = 2
    ZONE_BROWN = 3
    OBSTACLE_TYPE_UNKNOWN = 0
    OBSTACLE_TYPE_HUMAN = 1
    OBSTACLE_TYPE_TRAFFIC_LIGHT = 2
    OBSTACLE_TYPE_CAR = 3

    def __init__(self):
        self.service = ZcmService()
        self.clustersCount = 0
        self.scanNumber = 0
        self.scanClusters = []

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmLidarClusterWithAttributesList._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        buf.write(struct.pack(">ii", self.clustersCount, self.scanNumber))
        for i0 in range(self.clustersCount):
            assert self.scanClusters[i0]._get_packed_fingerprint() == ZcmLidarClusterWithAttributes._get_packed_fingerprint()
            self.scanClusters[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmLidarClusterWithAttributesList._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmLidarClusterWithAttributesList._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmLidarClusterWithAttributesList()
        self.service = ZcmService._decode_one(buf)
        self.clustersCount, self.scanNumber = struct.unpack(">ii", buf.read(8))
        self.scanClusters = []
        for i0 in range(self.clustersCount):
            self.scanClusters.append(ZcmLidarClusterWithAttributes._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmLidarClusterWithAttributesList in parents: return 0
        newparents = parents + [ZcmLidarClusterWithAttributesList]
        tmphash = (0xd3bce4006d8890e3+ ZcmService._get_hash_recursive(newparents)+ ZcmLidarClusterWithAttributes._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmLidarClusterWithAttributesList._packed_fingerprint is None:
            ZcmLidarClusterWithAttributesList._packed_fingerprint = struct.pack(">Q", ZcmLidarClusterWithAttributesList._get_hash_recursive([]))
        return ZcmLidarClusterWithAttributesList._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

