/** @mainpage Результат объединения кластеров от лидара с данным нейронной сети определяющей людей на видео */ 

/**
 * @struct ZcmLidarClusterMediumPoint
 * @brief Сообщение содержит информацию о средней точке кластера
 *
 * @var ZcmLidarClusterMediumPoint::x
 * @brief - средняя точка по оси x
 *
 * @var ZcmLidarClusterMediumPoint::y
 * @brief - средняя точка по оси y
 *
 * @var ZcmLidarClusterMediumPoint::z
 * @brief - средняя точка по оси z
 *
 * @var ZcmLidarClusterMediumPoint::predicted_x
 * @brief - предсказанная на основе фильтра Калмана средняя точка по оси x
 *
 * @var ZcmLidarClusterMediumPoint::predicted_y
 * @brief - предсказанная на основе фильтра Калмана средняя точка по оси y
 *
 * @var ZcmLidarClusterMediumPoint::predicted_z
 * @brief - предсказанная на основе фильтра Калмана средняя точка по оси z
 *
 * @var ZcmLidarClusterMediumPoint::corrected_x
 * @brief - скорректированная на основе фильтра Калмана и измерения средняя точка по оси x
 *
 * @var ZcmLidarClusterMediumPoint::corrected_y
 * @brief - скорректированная на основе фильтра Калмана и измерения средняя точка по оси y
 *
 * @var ZcmLidarClusterMediumPoint::corrected_z
 * @brief - скорректированная на основе фильтра Калмана и измерения средняя точка по оси z
 *
 *
 */
struct ZcmLidarClusterMediumPoint
{
    float x;
    float y;
    float z;
    
    float predicted_x;
    float predicted_y;
    float predicted_z;

    float corrected_x;
    float corrected_y;
    float corrected_z;
}

/**
 * @struct ZcmLidarClusterBoundRect
 * @brief Сообщение содержит информацию о прямоугольнике описыыающем точки
 *
 * @var ZcmLidarClusterBoundRect::top_left_x
 * @brief - левая верхняя точка по оси x
 *
 * @var ZcmLidarClusterBoundRect::top_left_y
 * @brief - левая верхняя точка по оси y
 *
 * @var ZcmLidarClusterBoundRect::top_right_x
 * @brief - правая верхняя точка по оси x
 *
 * @var ZcmLidarClusterBoundRect::top_right_y
 * @brief - правая верхняя точка по оси y
 *
 * @var ZcmLidarClusterBoundRect::bottom_left_x
 * @brief - левая нижняя точка по оси x
 *
 * @var ZcmLidarClusterBoundRect::bottom_left_y
 * @brief - левая верхняя точка по оси y
 *
 * @var ZcmLidarClusterBoundRect::bottom_right_x
 * @brief - правая верхняя точка по оси x
 *
 * @var ZcmLidarClusterBoundRect::bottom_right_y
 * @brief - правая верхняя точка по оси y
 *
 * @var ZcmLidarClusterBoundRect::center_x
 * @brief - центр прямоуголника по оси x
 *
 * @var ZcmLidarClusterBoundRect::center_y
 * @brief - центр прямоуголника по оси y
 *
 * @var ZcmLidarClusterBoundRect::width
 * @brief - ширина прямоугольника
 *
 * @var ZcmLidarClusterBoundRect::heitgh
 * @brief - высота прямоугольника
 *
 * @var ZcmLidarClusterBoundRect::angle
 * @brief - угол поворота прямоугольника
 *
 *
 */
struct ZcmLidarClusterBoundRect
{
    float top_left_x;
    float top_left_y;

    float top_right_x;
    float top_right_y;
    
    float bottom_left_x;
    float bottom_left_y;

    float bottom_right_x;
    float bottom_right_y;
    
    float center_x;
    float center_y;
        
    float width;
    float height;
    
    float angle;
}

/**
 * @struct ZcmClusterAttributes
 * @brief Сообщение содержит координаты объекта относительно лидара
 *
 * @var ZcmClusterAttributes::obstacle_type
 * @brief - класс объекта:
 *                  OBSTACLE_TYPE_UNKNOWN
 *                  OBSTACLE_TYPE_HUMAN
 *                  OBSTACLE_TYPE_TRAFFIC_LIGHT
 *                  OBSTACLE_TYPE_CAR
 *
 * @var ZcmClusterAttributes::label
 * @brief - строка, характеризующая класс объекта
 *
 * @var ZcmClusterAttributes::probability
 * @brief - вероятностная характеристика принадлежности препятствия к опознанному классу, принимает значения от 0 до 1
 *
 * @var ZcmClusterAttributes::zone
 * @brief - идентификатор зоны
 *
 * @var ZcmClusterAttributes::distance
 * @brief - расстояние до препятствия, метр
 *
 */
struct ZcmClusterAttributes
{
    int8_t obstacle_type;
    int8_t zone;    
    string label;
    double probability;
    double distance;
}

/**
 * @struct ZcmLidarClusterWithAttributes
 * @brief Сообщение содержит информацию о всех точках кластера
 *
 * @var ZcmLidarClusterWithAttributes::clusterID
 * @brief - уникальный номер кластера
 *
 * @var ZcmLidarClusterWithAttributes::attributes_exists
 * @brief - признак наличия аттрибутов от нейронной сети
 *
 * @var ZcmLidarClusterWithAttributes::medium_point
 * @brief - центр масс кластера
 *
 * @var ZcmLidarClusterWithAttributes::bounding_rect
 * @brief - прямоугольник описывающий точки кластера
 *
 * @var ZcmLidarClusterWithAttributes::attributes
 * @brief - аттрибуты кластера от нейронной сети
 *
 * @var ZcmLidarClusterWithAttributes::created
 * @brief - время создания
 *
 *
 */
struct ZcmLidarClusterWithAttributes
{    
    int32_t clusterID;
    boolean attributes_exists;
    ZcmLidarClusterMediumPoint medium_point;
    ZcmLidarClusterBoundRect bounding_rect;
    ZcmClusterAttributes attributes;
    int64_t created;
}

/**
 * @struct ZcmLidarClusterWithAttributesList
 * @brief Сообщение содержит информацию о всех кластерах полученных от лидара с типа объектов полученными от нейронной сети
 *
 * @var ZcmLidarClusterWithAttributesList::clustersCount
 * @brief - кол-во кластеров
 *
 * @var ZcmLidarClusterWithAttributesList::scanNumber
 * @brief - номер скана. Увеличивается с каждым новым сканированием
 *
 * @var ZcmLidarClusterWithAttributesList::scanClusters
 * @brief - список кластеров объединенных с данными нейронной сети
 *
 *
 */
struct ZcmLidarClusterWithAttributesList
{
    ZcmService service;

    const int8_t ZONE_RED = 1;
    const int8_t ZONE_YELLOW = 2;
    const int8_t ZONE_BROWN = 3;

    const int8_t OBSTACLE_TYPE_UNKNOWN = 0;
    const int8_t OBSTACLE_TYPE_HUMAN = 1;
    const int8_t OBSTACLE_TYPE_TRAFFIC_LIGHT = 2;
    const int8_t OBSTACLE_TYPE_CAR = 3;
        
    int32_t clustersCount;
    int32_t scanNumber;
    ZcmLidarClusterWithAttributes scanClusters[clustersCount];
}
