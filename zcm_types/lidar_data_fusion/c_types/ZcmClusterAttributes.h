// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmClusterAttributes_h
#define _ZcmClusterAttributes_h

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @struct ZcmClusterAttributes
 * @brief Сообщение содержит координаты объекта относительно лидара
 * @var ZcmClusterAttributes::obstacle_type
 * @brief - класс объекта:
 *                  OBSTACLE_TYPE_UNKNOWN
 *                  OBSTACLE_TYPE_HUMAN
 *                  OBSTACLE_TYPE_TRAFFIC_LIGHT
 *                  OBSTACLE_TYPE_CAR
 * @var ZcmClusterAttributes::label
 * @brief - строка, характеризующая класс объекта
 * @var ZcmClusterAttributes::probability
 * @brief - вероятностная характеристика принадлежности препятствия к опознанному классу, принимает значения от 0 до 1
 * @var ZcmClusterAttributes::zone
 * @brief - идентификатор зоны
 * @var ZcmClusterAttributes::distance
 * @brief - расстояние до препятствия, метр
 *
 */
typedef struct _ZcmClusterAttributes ZcmClusterAttributes;
struct _ZcmClusterAttributes
{
    int8_t     obstacle_type;
    int8_t     zone;
    char*      label;
    double     probability;
    double     distance;
};

/**
 * Create a deep copy of a ZcmClusterAttributes.
 * When no longer needed, destroy it with ZcmClusterAttributes_destroy()
 */
ZcmClusterAttributes* ZcmClusterAttributes_copy(const ZcmClusterAttributes* to_copy);

/**
 * Destroy an instance of ZcmClusterAttributes created by ZcmClusterAttributes_copy()
 */
void ZcmClusterAttributes_destroy(ZcmClusterAttributes* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmClusterAttributes_subscription_t ZcmClusterAttributes_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmClusterAttributes is received.
 */
typedef void(*ZcmClusterAttributes_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmClusterAttributes* msg, void* userdata);

/**
 * Publish a message of type ZcmClusterAttributes using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmClusterAttributes_publish(zcm_t* zcm, const char* channel, const ZcmClusterAttributes* msg);

/**
 * Subscribe to messages of type ZcmClusterAttributes using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmClusterAttributes_unsubscribe.
 */
ZcmClusterAttributes_subscription_t* ZcmClusterAttributes_subscribe(zcm_t* zcm, const char* channel, ZcmClusterAttributes_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmClusterAttributes_subscribe()
 */
int ZcmClusterAttributes_unsubscribe(zcm_t* zcm, ZcmClusterAttributes_subscription_t* hid);
/**
 * Encode a message of type ZcmClusterAttributes into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmClusterAttributes_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmClusterAttributes_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmClusterAttributes* p);

/**
 * Decode a message of type ZcmClusterAttributes from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmClusterAttributes_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmClusterAttributes_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmClusterAttributes* msg);

/**
 * Release resources allocated by ZcmClusterAttributes_decode()
 * @return 0
 */
int ZcmClusterAttributes_decode_cleanup(ZcmClusterAttributes* p);

/**
 * Check how many bytes are required to encode a message of type ZcmClusterAttributes
 */
uint32_t ZcmClusterAttributes_encoded_size(const ZcmClusterAttributes* p);
uint32_t ZcmClusterAttributes_struct_size(void);
uint32_t ZcmClusterAttributes_num_fields(void);
int      ZcmClusterAttributes_get_field(const ZcmClusterAttributes* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmClusterAttributes_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmClusterAttributes_get_hash(void);
uint64_t __ZcmClusterAttributes_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmClusterAttributes_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmClusterAttributes* p, uint32_t elements);
int      __ZcmClusterAttributes_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmClusterAttributes* p, uint32_t elements);
int      __ZcmClusterAttributes_decode_array_cleanup(ZcmClusterAttributes* p, uint32_t elements);
uint32_t __ZcmClusterAttributes_encoded_array_size(const ZcmClusterAttributes* p, uint32_t elements);
uint32_t __ZcmClusterAttributes_clone_array(const ZcmClusterAttributes* p, ZcmClusterAttributes* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
