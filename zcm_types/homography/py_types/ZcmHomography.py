"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmService import ZcmService

class ZcmHomography(object):
    __slots__ = ["service", "rotation", "translation", "normal"]

    def __init__(self):
        self.service = ZcmService()
        self.rotation = [ 0.0 for dim0 in range(3) ]
        self.translation = [ 0.0 for dim0 in range(3) ]
        self.normal = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmHomography._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        buf.write(struct.pack('>3f', *self.rotation[:3]))
        buf.write(struct.pack('>3f', *self.translation[:3]))
        buf.write(struct.pack('>3f', *self.normal[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmHomography._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmHomography._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmHomography()
        self.service = ZcmService._decode_one(buf)
        self.rotation = struct.unpack('>3f', buf.read(12))
        self.translation = struct.unpack('>3f', buf.read(12))
        self.normal = struct.unpack('>3f', buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmHomography in parents: return 0
        newparents = parents + [ZcmHomography]
        tmphash = (0x19b67da422fbe756+ ZcmService._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmHomography._packed_fingerprint is None:
            ZcmHomography._packed_fingerprint = struct.pack(">Q", ZcmHomography._get_hash_recursive([]))
        return ZcmHomography._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

