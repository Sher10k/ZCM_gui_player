// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmLidarScalaFilteredObjectAttributes_h
#define _ZcmLidarScalaFilteredObjectAttributes_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmLidarScalaContourPoint.h"
/**
 * @struct ZcmLidarScalaFilteredObjectAttributes
 * @brief Отфильтрованные параметры
 * @var ZcmLidarScalaFilteredObjectAttributes::objectAge
 * @brief - количество сканирований на протяжении которых данный объект существует
 * @var ZcmLidarScalaFilteredObjectAttributes::hiddenStatusAge
 * @brief - количество сканирований на протяжении которых данный объект был предсказан
 * @var ZcmLidarScalaFilteredObjectAttributes::dynamicFlagState
 * @brief - динамическое состояние объекта
 * 				 0 - объект в стадии инициализации
 * 				 1 - объект в стадии отслеживания
 * 				 
 * @var ZcmLidarScalaFilteredObjectAttributes::dynamicFlagProperty
 * @brief - динамическое состояние объекта
 * 				1 - dynamic and moving
 * 				2 - dynamic and stopped
 * 				3 - internal
 * 				4 - a priori stationary
 * @var ZcmLidarScalaFilteredObjectAttributes::relativeTimeOfMeasure
 * @brief - время с момента начала измерения (мс)
 * @var ZcmLidarScalaFilteredObjectAttributes::positionClosestObjectPointX
 * @brief - ближайшая точка объекта по оси X (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::positionClosestObjectPointY
 * @brief - ближайшая точка объекта по оси Y (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::relativeVelocityX
 * @brief - относительная скорость по оси X (м/с)
 * @var ZcmLidarScalaFilteredObjectAttributes::relativeVelocityY
 * @brief - относительная скорость по оси Y (м/с)
 * @var ZcmLidarScalaFilteredObjectAttributes::relativeVelocitySigmaX
 * @brief - погрешность относительной скорости по оси X (м/с)
 * @var ZcmLidarScalaFilteredObjectAttributes::relativeVelocitySigmaY
 * @brief - погрешность относительной скорости по оси Y (м/с)
 * @var ZcmLidarScalaFilteredObjectAttributes::classification
 * @brief - классификация объекта \n
 * 					0  - Unclassified   \n
 * 					1  - UnknownSmall   \n
 * 					2  - UnknownBig     \n
 * 					3  - Pedestrian    \n
 * 					4  - Bike           \n
 * 					5  - Car            \n
 * 					6  - Truck          \n
 * 					10 - Overdrivable  \n
 * 					11 - Underdrivable  \n
 * 					12 - Bicycle        \n
 * 					15 - Motorbike      \n
 * 					16 - Infrastructure \n
 * @var ZcmLidarScalaFilteredObjectAttributes::classificationQuality
 * @brief - ???
 * @var ZcmLidarScalaFilteredObjectAttributes::classificationAge
 * @brief - количество сканирований на протяжении которых данный объект относится к этому классу
 * @var ZcmLidarScalaFilteredObjectAttributes::objectBoxSizeX
 * @brief - расстояние до объекта по оси X (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::objectBoxSizeY
 * @brief - расстояние до объекта по оси Y (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::objectBoxSizeWidth
 * @brief - ширина объекта (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::objectBoxSizeLength
 * @brief - длина объекта (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::objectBoxSizeSigmaX
 * @brief - погрешность по оси X (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::objectBoxSizeSigmaY
 * @brief - погрешность по оси X (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::objectBoxOrientation
 * @brief - угол поворота объекта (градусы)
 *  
 * @var ZcmLidarScalaFilteredObjectAttributes::objectBoxOrientationSigma
 * @brief - погрешность угла поворота объекта (градусы)
 * @var ZcmLidarScalaFilteredObjectAttributes::objectBoxHeight
 * @brief - высота объекта (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::referencePointLocation 
 * @brief -  расположение базовой точки объекта \n
 * 				0x0 - CenterOfGravity \n
 * 				0x1 - FrontLeft       \n 
 * 				0x2 - FrontRight      \n 
 * 				0x3 - RearRight       \n
 * 				0x4 - RearLeft        \n
 * 				0x5 - FrontCenter     \n
 * 				0x6 - RightCenter     \n
 * 				0x7 - RearCenter      \n
 * 				0x8 - LeftCenter      \n
 * 				0x9 - ObjectCenter    \n
 * 				0xff - Unknown         
 *  
 * @var ZcmLidarScalaFilteredObjectAttributes::referencePointCoordX
 * @brief - Расстояние до базовой точки по оси X (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::referencePointCoordY
 * @brief - Расстояние до базовой точки по оси Y (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::referencePointCoordSigmaX
 * @brief - погрешность расстояния до базовой точки по оси X (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::referencePointCoordSigmaY
 * @brief - погрешность расстояния до базовой точки по оси Y (м)
 * @var ZcmLidarScalaFilteredObjectAttributes::referencePointPositionCorrCoeff
 * @brief - ???
 * @var ZcmLidarScalaFilteredObjectAttributes::existenceProbaility
 * @brief - вероятность существования объекта
 * @var ZcmLidarScalaFilteredObjectAttributes::absoluteVelocityX
 * @brief - абсолютное значение скорости по X
 * @var ZcmLidarScalaFilteredObjectAttributes::absoluteVelocityY
 * @brief - абсолютное значение скорости по Y
 * @var ZcmLidarScalaFilteredObjectAttributes::absoluteVelocitySigmaX
 * @brief - погрешность абсолютного значения скорости по X
 * @var ZcmLidarScalaFilteredObjectAttributes::absoluteVelocitySigmaY
 * @brief - погрешность абсолютного значения скорости по Y
 * @var ZcmLidarScalaFilteredObjectAttributes::velocityCorrCoeff
 * @brief - ???
 * @var ZcmLidarScalaFilteredObjectAttributes::accelerationX
 * @brief - ускорение по оси X (м/с2)
 * @var ZcmLidarScalaFilteredObjectAttributes::accelerationY
 * @brief - ускорение по оси Y (м/с2)
 * @var ZcmLidarScalaFilteredObjectAttributes::accelerationSigmaX
 * @brief - погрешность ускорения по оси X (м/с2)
 * @var ZcmLidarScalaFilteredObjectAttributes::accelerationSigmaY
 * @brief - погрешность ускорения по оси Y (м/с2)
 * @var ZcmLidarScalaFilteredObjectAttributes::accelerationCorrCoeff
 * @brief - ???
 * @var ZcmLidarScalaFilteredObjectAttributes::possibleNbOfContourPoints
 * @brief - количество точек контура объекта
 * @var ZcmLidarScalaFilteredObjectAttributes::contourPoints
 * @brief - точки контура объекта
 *
 */
typedef struct _ZcmLidarScalaFilteredObjectAttributes ZcmLidarScalaFilteredObjectAttributes;
struct _ZcmLidarScalaFilteredObjectAttributes
{
    int32_t    objectAge;
    int32_t    hiddenStatusAge;
    int8_t     dynamicFlagState;
    int8_t     dynamicFlagProperty;
    int32_t    relativeTimeOfMeasure;
    float      positionClosestObjectPointX;
    float      positionClosestObjectPointY;
    float      relativeVelocityX;
    float      relativeVelocityY;
    float      relativeVelocitySigmaX;
    float      relativeVelocitySigmaY;
    int16_t    classification;
    int16_t    classificationQuality;
    int32_t    classificationAge;
    float      objectBoxSizeX;
    float      objectBoxSizeY;
    float      objectBoxSizeSigmaX;
    float      objectBoxSizeSigmaY;
    float      objectBoxOrientation;
    float      objectBoxOrientationSigma;
    float      objectBoxHeight;
    int16_t    referencePointLocation;
    float      referencePointCoordX;
    float      referencePointCoordY;
    float      referencePointCoordSigmaX;
    float      referencePointCoordSigmaY;
    int16_t    referencePointPositionCorrCoeff;
    float      existenceProbaility;
    float      absoluteVelocityX;
    float      absoluteVelocityY;
    float      absoluteVelocitySigmaX;
    float      absoluteVelocitySigmaY;
    int16_t    velocityCorrCoeff;
    float      accelerationX;
    float      accelerationY;
    float      accelerationSigmaX;
    float      accelerationSigmaY;
    int16_t    accelerationCorrCoeff;
    int16_t    possibleNbOfContourPoints;
    ZcmLidarScalaContourPoint *contourPoints;
};

/**
 * Create a deep copy of a ZcmLidarScalaFilteredObjectAttributes.
 * When no longer needed, destroy it with ZcmLidarScalaFilteredObjectAttributes_destroy()
 */
ZcmLidarScalaFilteredObjectAttributes* ZcmLidarScalaFilteredObjectAttributes_copy(const ZcmLidarScalaFilteredObjectAttributes* to_copy);

/**
 * Destroy an instance of ZcmLidarScalaFilteredObjectAttributes created by ZcmLidarScalaFilteredObjectAttributes_copy()
 */
void ZcmLidarScalaFilteredObjectAttributes_destroy(ZcmLidarScalaFilteredObjectAttributes* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmLidarScalaFilteredObjectAttributes_subscription_t ZcmLidarScalaFilteredObjectAttributes_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmLidarScalaFilteredObjectAttributes is received.
 */
typedef void(*ZcmLidarScalaFilteredObjectAttributes_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmLidarScalaFilteredObjectAttributes* msg, void* userdata);

/**
 * Publish a message of type ZcmLidarScalaFilteredObjectAttributes using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmLidarScalaFilteredObjectAttributes_publish(zcm_t* zcm, const char* channel, const ZcmLidarScalaFilteredObjectAttributes* msg);

/**
 * Subscribe to messages of type ZcmLidarScalaFilteredObjectAttributes using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmLidarScalaFilteredObjectAttributes_unsubscribe.
 */
ZcmLidarScalaFilteredObjectAttributes_subscription_t* ZcmLidarScalaFilteredObjectAttributes_subscribe(zcm_t* zcm, const char* channel, ZcmLidarScalaFilteredObjectAttributes_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmLidarScalaFilteredObjectAttributes_subscribe()
 */
int ZcmLidarScalaFilteredObjectAttributes_unsubscribe(zcm_t* zcm, ZcmLidarScalaFilteredObjectAttributes_subscription_t* hid);
/**
 * Encode a message of type ZcmLidarScalaFilteredObjectAttributes into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmLidarScalaFilteredObjectAttributes_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmLidarScalaFilteredObjectAttributes_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmLidarScalaFilteredObjectAttributes* p);

/**
 * Decode a message of type ZcmLidarScalaFilteredObjectAttributes from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmLidarScalaFilteredObjectAttributes_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmLidarScalaFilteredObjectAttributes_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmLidarScalaFilteredObjectAttributes* msg);

/**
 * Release resources allocated by ZcmLidarScalaFilteredObjectAttributes_decode()
 * @return 0
 */
int ZcmLidarScalaFilteredObjectAttributes_decode_cleanup(ZcmLidarScalaFilteredObjectAttributes* p);

/**
 * Check how many bytes are required to encode a message of type ZcmLidarScalaFilteredObjectAttributes
 */
uint32_t ZcmLidarScalaFilteredObjectAttributes_encoded_size(const ZcmLidarScalaFilteredObjectAttributes* p);
uint32_t ZcmLidarScalaFilteredObjectAttributes_struct_size(void);
uint32_t ZcmLidarScalaFilteredObjectAttributes_num_fields(void);
int      ZcmLidarScalaFilteredObjectAttributes_get_field(const ZcmLidarScalaFilteredObjectAttributes* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmLidarScalaFilteredObjectAttributes_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmLidarScalaFilteredObjectAttributes_get_hash(void);
uint64_t __ZcmLidarScalaFilteredObjectAttributes_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmLidarScalaFilteredObjectAttributes_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmLidarScalaFilteredObjectAttributes* p, uint32_t elements);
int      __ZcmLidarScalaFilteredObjectAttributes_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmLidarScalaFilteredObjectAttributes* p, uint32_t elements);
int      __ZcmLidarScalaFilteredObjectAttributes_decode_array_cleanup(ZcmLidarScalaFilteredObjectAttributes* p, uint32_t elements);
uint32_t __ZcmLidarScalaFilteredObjectAttributes_encoded_array_size(const ZcmLidarScalaFilteredObjectAttributes* p, uint32_t elements);
uint32_t __ZcmLidarScalaFilteredObjectAttributes_clone_array(const ZcmLidarScalaFilteredObjectAttributes* p, ZcmLidarScalaFilteredObjectAttributes* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
