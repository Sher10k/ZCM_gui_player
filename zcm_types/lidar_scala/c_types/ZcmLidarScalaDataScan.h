// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmLidarScalaDataScan_h
#define _ZcmLidarScalaDataScan_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmService.h"
#include "ZcmLidarScalaPoint.h"
#define ZCMLIDARSCALADATASCAN_anglePerTick 0.03125
#define ZCMLIDARSCALADATASCAN_anglePerLayer 0.8

/**
 * @struct ZcmLidarScalaDataScan
 * @brief Сообщение содержит информацию о всех точках полученных за одно сканирование
 * @var ZcmLidarScalaDataScan::scanNumber
 * @brief - номер скана. Увеличивается с каждым новым сканированием
 * @var ZcmLidarScalaDataScan::rotatingDirection
 * @brief - направление вращения: \n
 * 				 0 - по часовой стрелке \n
 * 				 1 - против часовой стрелки 
 * @var ZcmLidarScalaDataScan::anglePerTick
 * @brief - 1/32 градуса в тике
 * @var ZcmLidarScalaDataScan::anglePerLayer
 * @brief - количество градусов на уровень (Layer)
 * @var ZcmLidarScalaDataScan::scannerHeight
 * @brief - высота на которой расположен сенсор (м)
 * @var ZcmLidarScalaDataScan::nbOfPoints
 * @brief - количество точек в одном сканировании
 * @var ZcmLidarScalaDataScan::scanPoints
 * @brief - массив точек полученных за одно сканирование
 *                         
 *
 */
typedef struct _ZcmLidarScalaDataScan ZcmLidarScalaDataScan;
struct _ZcmLidarScalaDataScan
{
    ZcmService service;
    int32_t    scanNumber;
    int32_t    rotatingDirection;
    float      scannerHeight;
    int32_t    nbOfPoints;
    ZcmLidarScalaPoint *scanPoints;
};

/**
 * Create a deep copy of a ZcmLidarScalaDataScan.
 * When no longer needed, destroy it with ZcmLidarScalaDataScan_destroy()
 */
ZcmLidarScalaDataScan* ZcmLidarScalaDataScan_copy(const ZcmLidarScalaDataScan* to_copy);

/**
 * Destroy an instance of ZcmLidarScalaDataScan created by ZcmLidarScalaDataScan_copy()
 */
void ZcmLidarScalaDataScan_destroy(ZcmLidarScalaDataScan* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmLidarScalaDataScan_subscription_t ZcmLidarScalaDataScan_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmLidarScalaDataScan is received.
 */
typedef void(*ZcmLidarScalaDataScan_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmLidarScalaDataScan* msg, void* userdata);

/**
 * Publish a message of type ZcmLidarScalaDataScan using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmLidarScalaDataScan_publish(zcm_t* zcm, const char* channel, const ZcmLidarScalaDataScan* msg);

/**
 * Subscribe to messages of type ZcmLidarScalaDataScan using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmLidarScalaDataScan_unsubscribe.
 */
ZcmLidarScalaDataScan_subscription_t* ZcmLidarScalaDataScan_subscribe(zcm_t* zcm, const char* channel, ZcmLidarScalaDataScan_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmLidarScalaDataScan_subscribe()
 */
int ZcmLidarScalaDataScan_unsubscribe(zcm_t* zcm, ZcmLidarScalaDataScan_subscription_t* hid);
/**
 * Encode a message of type ZcmLidarScalaDataScan into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmLidarScalaDataScan_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmLidarScalaDataScan_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmLidarScalaDataScan* p);

/**
 * Decode a message of type ZcmLidarScalaDataScan from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmLidarScalaDataScan_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmLidarScalaDataScan_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmLidarScalaDataScan* msg);

/**
 * Release resources allocated by ZcmLidarScalaDataScan_decode()
 * @return 0
 */
int ZcmLidarScalaDataScan_decode_cleanup(ZcmLidarScalaDataScan* p);

/**
 * Check how many bytes are required to encode a message of type ZcmLidarScalaDataScan
 */
uint32_t ZcmLidarScalaDataScan_encoded_size(const ZcmLidarScalaDataScan* p);
uint32_t ZcmLidarScalaDataScan_struct_size(void);
uint32_t ZcmLidarScalaDataScan_num_fields(void);
int      ZcmLidarScalaDataScan_get_field(const ZcmLidarScalaDataScan* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmLidarScalaDataScan_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmLidarScalaDataScan_get_hash(void);
uint64_t __ZcmLidarScalaDataScan_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmLidarScalaDataScan_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmLidarScalaDataScan* p, uint32_t elements);
int      __ZcmLidarScalaDataScan_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmLidarScalaDataScan* p, uint32_t elements);
int      __ZcmLidarScalaDataScan_decode_array_cleanup(ZcmLidarScalaDataScan* p, uint32_t elements);
uint32_t __ZcmLidarScalaDataScan_encoded_array_size(const ZcmLidarScalaDataScan* p, uint32_t elements);
uint32_t __ZcmLidarScalaDataScan_clone_array(const ZcmLidarScalaDataScan* p, ZcmLidarScalaDataScan* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
