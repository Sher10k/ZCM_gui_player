// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmLidarScalaObject_h
#define _ZcmLidarScalaObject_h

#ifdef __cplusplus
extern "C" {
#endif

#include "ZcmLidarScalaUnfilteredObjectAttributes.h"
#include "ZcmLidarScalaFilteredObjectAttributes.h"
/**
 * @struct ZcmLidarScalaObject
 * @brief Сообщение содержит информацию об объекте
 * @var ZcmLidarScalaObject::objectId
 * @brief - уникальный идентификатор объекта
 * @var ZcmLidarScalaObject::unfilteredAttrib
 * @brief - сырые не отфильтрованные параметры
 * @var ZcmLidarScalaObject::filteredAttrib
 * @brief - параметры полученные от отслеживающей модели. \n
 * 			Данные параметры будут получены даже если объект в данный не виден, \n
 * 			но его существование все еще предсказывается.
 *
 */
typedef struct _ZcmLidarScalaObject ZcmLidarScalaObject;
struct _ZcmLidarScalaObject
{
    int64_t    objectId;
    ZcmLidarScalaUnfilteredObjectAttributes unfilteredAttrib;
    ZcmLidarScalaFilteredObjectAttributes filteredAttrib;
};

/**
 * Create a deep copy of a ZcmLidarScalaObject.
 * When no longer needed, destroy it with ZcmLidarScalaObject_destroy()
 */
ZcmLidarScalaObject* ZcmLidarScalaObject_copy(const ZcmLidarScalaObject* to_copy);

/**
 * Destroy an instance of ZcmLidarScalaObject created by ZcmLidarScalaObject_copy()
 */
void ZcmLidarScalaObject_destroy(ZcmLidarScalaObject* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmLidarScalaObject_subscription_t ZcmLidarScalaObject_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmLidarScalaObject is received.
 */
typedef void(*ZcmLidarScalaObject_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmLidarScalaObject* msg, void* userdata);

/**
 * Publish a message of type ZcmLidarScalaObject using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmLidarScalaObject_publish(zcm_t* zcm, const char* channel, const ZcmLidarScalaObject* msg);

/**
 * Subscribe to messages of type ZcmLidarScalaObject using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmLidarScalaObject_unsubscribe.
 */
ZcmLidarScalaObject_subscription_t* ZcmLidarScalaObject_subscribe(zcm_t* zcm, const char* channel, ZcmLidarScalaObject_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmLidarScalaObject_subscribe()
 */
int ZcmLidarScalaObject_unsubscribe(zcm_t* zcm, ZcmLidarScalaObject_subscription_t* hid);
/**
 * Encode a message of type ZcmLidarScalaObject into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmLidarScalaObject_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmLidarScalaObject_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmLidarScalaObject* p);

/**
 * Decode a message of type ZcmLidarScalaObject from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmLidarScalaObject_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmLidarScalaObject_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmLidarScalaObject* msg);

/**
 * Release resources allocated by ZcmLidarScalaObject_decode()
 * @return 0
 */
int ZcmLidarScalaObject_decode_cleanup(ZcmLidarScalaObject* p);

/**
 * Check how many bytes are required to encode a message of type ZcmLidarScalaObject
 */
uint32_t ZcmLidarScalaObject_encoded_size(const ZcmLidarScalaObject* p);
uint32_t ZcmLidarScalaObject_struct_size(void);
uint32_t ZcmLidarScalaObject_num_fields(void);
int      ZcmLidarScalaObject_get_field(const ZcmLidarScalaObject* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmLidarScalaObject_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmLidarScalaObject_get_hash(void);
uint64_t __ZcmLidarScalaObject_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmLidarScalaObject_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmLidarScalaObject* p, uint32_t elements);
int      __ZcmLidarScalaObject_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmLidarScalaObject* p, uint32_t elements);
int      __ZcmLidarScalaObject_decode_array_cleanup(ZcmLidarScalaObject* p, uint32_t elements);
uint32_t __ZcmLidarScalaObject_encoded_array_size(const ZcmLidarScalaObject* p, uint32_t elements);
uint32_t __ZcmLidarScalaObject_clone_array(const ZcmLidarScalaObject* p, ZcmLidarScalaObject* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
