// THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
// BY HAND!!
//
// Generated by zcm-gen

#include <stdint.h>
#include <stdlib.h>
#include <zcm/zcm_coretypes.h>
#include <zcm/zcm.h>

#ifndef _ZcmLidarScalaPoint_h
#define _ZcmLidarScalaPoint_h

#ifdef __cplusplus
extern "C" {
#endif

/**
 * @mainpage Сообщения от лидара Scala
 * Данный документ содержит описание сообщений для работы
 * с лидаром Ibeo Scala.
 *
 * @struct ZcmLidarScalaPoint
 * @brief Сообщение содержит информацию о всех точках полученных за одно сканирование
 * @var ZcmLidarScalaPoint::echoId
 * @brief - номер переотражения данной точки. От 0 до 2
 * @var ZcmLidarScalaPoint::layerId
 * @brief - номер сканирующего луча. О - 3
 * @var ZcmLidarScalaPoint::flags
 * @brief - тип точки: \n
 * 				0x1 - transparent \n
 * 				0x2 - осадки\n
 * 				0x4 - земля\n
 * 				0x8 - грязь\n
 * @var ZcmLidarScalaPoint::horizontalAngle
 * @brief - значение угла в полярной системе координат (тики). \n
 * 			Тик = ZcmLidarScalaDataScan::anglePerTick градусов 
 * 		 
 * @var ZcmLidarScalaPoint::radialDistance
 * @brief - значение расстояния в полярной системе координат (м)
 * @var ZcmLidarScalaPoint::x
 * @brief - расстояние до точки по оси Х в декартовой системе координат (м)
 * @var ZcmLidarScalaPoint::y
 * @brief - расстояние до точки по оси Y в декартовой системе координат (м)
 * @var ZcmLidarScalaPoint::z
 * @brief - расстояние до точки по оси Z в декартовой системе координат (м)
 * @var ZcmLidarScalaPoint::echoPulseWidth
 * @brief - ширина импульса переотражения (м)
 *
 */
typedef struct _ZcmLidarScalaPoint ZcmLidarScalaPoint;
struct _ZcmLidarScalaPoint
{
    int16_t    echoId;
    int16_t    layerId;
    int32_t    flags;
    int32_t    horizontalAngle;
    float      radialDistance;
    float      x;
    float      y;
    float      z;
    float      echoPulseWidth;
};

/**
 * Create a deep copy of a ZcmLidarScalaPoint.
 * When no longer needed, destroy it with ZcmLidarScalaPoint_destroy()
 */
ZcmLidarScalaPoint* ZcmLidarScalaPoint_copy(const ZcmLidarScalaPoint* to_copy);

/**
 * Destroy an instance of ZcmLidarScalaPoint created by ZcmLidarScalaPoint_copy()
 */
void ZcmLidarScalaPoint_destroy(ZcmLidarScalaPoint* to_destroy);

/**
 * Identifies a single subscription.  This is an opaque data type.
 */
typedef struct _ZcmLidarScalaPoint_subscription_t ZcmLidarScalaPoint_subscription_t;

/**
 * Prototype for a callback function invoked when a message of type
 * ZcmLidarScalaPoint is received.
 */
typedef void(*ZcmLidarScalaPoint_handler_t)(const zcm_recv_buf_t* rbuf,
             const char* channel, const ZcmLidarScalaPoint* msg, void* userdata);

/**
 * Publish a message of type ZcmLidarScalaPoint using ZCM.
 *
 * @param zcm The ZCM instance to publish with.
 * @param channel The channel to publish on.
 * @param msg The message to publish.
 * @return 0 on success, <0 on error.  Success means ZCM has transferred
 * responsibility of the message data to the OS.
 */
int ZcmLidarScalaPoint_publish(zcm_t* zcm, const char* channel, const ZcmLidarScalaPoint* msg);

/**
 * Subscribe to messages of type ZcmLidarScalaPoint using ZCM.
 *
 * @param zcm The ZCM instance to subscribe with.
 * @param channel The channel to subscribe to.
 * @param handler The callback function invoked by ZCM when a message is received.
 *                This function is invoked by ZCM during calls to zcm_handle() and
 *                zcm_handle_timeout().
 * @param userdata An opaque pointer passed to @p handler when it is invoked.
 * @return pointer to subscription type, NULL if failure. Must clean up
 *         dynamic memory by passing the pointer to ZcmLidarScalaPoint_unsubscribe.
 */
ZcmLidarScalaPoint_subscription_t* ZcmLidarScalaPoint_subscribe(zcm_t* zcm, const char* channel, ZcmLidarScalaPoint_handler_t handler, void* userdata);

/**
 * Removes and destroys a subscription created by ZcmLidarScalaPoint_subscribe()
 */
int ZcmLidarScalaPoint_unsubscribe(zcm_t* zcm, ZcmLidarScalaPoint_subscription_t* hid);
/**
 * Encode a message of type ZcmLidarScalaPoint into binary form.
 *
 * @param buf The output buffer.
 * @param offset Encoding starts at this byte offset into @p buf.
 * @param maxlen Maximum number of bytes to write.  This should generally
 *               be equal to ZcmLidarScalaPoint_encoded_size().
 * @param msg The message to encode.
 * @return The number of bytes encoded, or <0 if an error occured.
 */
int ZcmLidarScalaPoint_encode(void* buf, uint32_t offset, uint32_t maxlen, const ZcmLidarScalaPoint* p);

/**
 * Decode a message of type ZcmLidarScalaPoint from binary form.
 * When decoding messages containing strings or variable-length arrays, this
 * function may allocate memory.  When finished with the decoded message,
 * release allocated resources with ZcmLidarScalaPoint_decode_cleanup().
 *
 * @param buf The buffer containing the encoded message
 * @param offset The byte offset into @p buf where the encoded message starts.
 * @param maxlen The maximum number of bytes to read while decoding.
 * @param msg Output parameter where the decoded message is stored
 * @return The number of bytes decoded, or <0 if an error occured.
 */
int ZcmLidarScalaPoint_decode(const void* buf, uint32_t offset, uint32_t maxlen, ZcmLidarScalaPoint* msg);

/**
 * Release resources allocated by ZcmLidarScalaPoint_decode()
 * @return 0
 */
int ZcmLidarScalaPoint_decode_cleanup(ZcmLidarScalaPoint* p);

/**
 * Check how many bytes are required to encode a message of type ZcmLidarScalaPoint
 */
uint32_t ZcmLidarScalaPoint_encoded_size(const ZcmLidarScalaPoint* p);
uint32_t ZcmLidarScalaPoint_struct_size(void);
uint32_t ZcmLidarScalaPoint_num_fields(void);
int      ZcmLidarScalaPoint_get_field(const ZcmLidarScalaPoint* p, uint32_t i, zcm_field_t* f);
const zcm_type_info_t* ZcmLidarScalaPoint_get_type_info(void);

// ZCM support functions. Users should not call these
int64_t  __ZcmLidarScalaPoint_get_hash(void);
uint64_t __ZcmLidarScalaPoint_hash_recursive(const __zcm_hash_ptr* p);
int      __ZcmLidarScalaPoint_encode_array(void* buf, uint32_t offset, uint32_t maxlen, const ZcmLidarScalaPoint* p, uint32_t elements);
int      __ZcmLidarScalaPoint_decode_array(const void* buf, uint32_t offset, uint32_t maxlen, ZcmLidarScalaPoint* p, uint32_t elements);
int      __ZcmLidarScalaPoint_decode_array_cleanup(ZcmLidarScalaPoint* p, uint32_t elements);
uint32_t __ZcmLidarScalaPoint_encoded_array_size(const ZcmLidarScalaPoint* p, uint32_t elements);
uint32_t __ZcmLidarScalaPoint_clone_array(const ZcmLidarScalaPoint* p, ZcmLidarScalaPoint* q, uint32_t elements);

#ifdef __cplusplus
}
#endif

#endif
