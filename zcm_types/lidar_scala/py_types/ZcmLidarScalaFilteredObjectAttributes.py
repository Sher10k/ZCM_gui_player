"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmLidarScalaContourPoint import ZcmLidarScalaContourPoint

class ZcmLidarScalaFilteredObjectAttributes(object):
    __slots__ = ["objectAge", "hiddenStatusAge", "dynamicFlagState", "dynamicFlagProperty", "relativeTimeOfMeasure", "positionClosestObjectPointX", "positionClosestObjectPointY", "relativeVelocityX", "relativeVelocityY", "relativeVelocitySigmaX", "relativeVelocitySigmaY", "classification", "classificationQuality", "classificationAge", "objectBoxSizeX", "objectBoxSizeY", "objectBoxSizeSigmaX", "objectBoxSizeSigmaY", "objectBoxOrientation", "objectBoxOrientationSigma", "objectBoxHeight", "referencePointLocation", "referencePointCoordX", "referencePointCoordY", "referencePointCoordSigmaX", "referencePointCoordSigmaY", "referencePointPositionCorrCoeff", "existenceProbaility", "absoluteVelocityX", "absoluteVelocityY", "absoluteVelocitySigmaX", "absoluteVelocitySigmaY", "velocityCorrCoeff", "accelerationX", "accelerationY", "accelerationSigmaX", "accelerationSigmaY", "accelerationCorrCoeff", "possibleNbOfContourPoints", "contourPoints"]

    def __init__(self):
        self.objectAge = 0
        self.hiddenStatusAge = 0
        self.dynamicFlagState = 0
        self.dynamicFlagProperty = 0
        self.relativeTimeOfMeasure = 0
        self.positionClosestObjectPointX = 0.0
        self.positionClosestObjectPointY = 0.0
        self.relativeVelocityX = 0.0
        self.relativeVelocityY = 0.0
        self.relativeVelocitySigmaX = 0.0
        self.relativeVelocitySigmaY = 0.0
        self.classification = 0
        self.classificationQuality = 0
        self.classificationAge = 0
        self.objectBoxSizeX = 0.0
        self.objectBoxSizeY = 0.0
        self.objectBoxSizeSigmaX = 0.0
        self.objectBoxSizeSigmaY = 0.0
        self.objectBoxOrientation = 0.0
        self.objectBoxOrientationSigma = 0.0
        self.objectBoxHeight = 0.0
        self.referencePointLocation = 0
        self.referencePointCoordX = 0.0
        self.referencePointCoordY = 0.0
        self.referencePointCoordSigmaX = 0.0
        self.referencePointCoordSigmaY = 0.0
        self.referencePointPositionCorrCoeff = 0
        self.existenceProbaility = 0.0
        self.absoluteVelocityX = 0.0
        self.absoluteVelocityY = 0.0
        self.absoluteVelocitySigmaX = 0.0
        self.absoluteVelocitySigmaY = 0.0
        self.velocityCorrCoeff = 0
        self.accelerationX = 0.0
        self.accelerationY = 0.0
        self.accelerationSigmaX = 0.0
        self.accelerationSigmaY = 0.0
        self.accelerationCorrCoeff = 0
        self.possibleNbOfContourPoints = 0
        self.contourPoints = []

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmLidarScalaFilteredObjectAttributes._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">iibbiffffffhhifffffffhffffhfffffhffffhh", self.objectAge, self.hiddenStatusAge, self.dynamicFlagState, self.dynamicFlagProperty, self.relativeTimeOfMeasure, self.positionClosestObjectPointX, self.positionClosestObjectPointY, self.relativeVelocityX, self.relativeVelocityY, self.relativeVelocitySigmaX, self.relativeVelocitySigmaY, self.classification, self.classificationQuality, self.classificationAge, self.objectBoxSizeX, self.objectBoxSizeY, self.objectBoxSizeSigmaX, self.objectBoxSizeSigmaY, self.objectBoxOrientation, self.objectBoxOrientationSigma, self.objectBoxHeight, self.referencePointLocation, self.referencePointCoordX, self.referencePointCoordY, self.referencePointCoordSigmaX, self.referencePointCoordSigmaY, self.referencePointPositionCorrCoeff, self.existenceProbaility, self.absoluteVelocityX, self.absoluteVelocityY, self.absoluteVelocitySigmaX, self.absoluteVelocitySigmaY, self.velocityCorrCoeff, self.accelerationX, self.accelerationY, self.accelerationSigmaX, self.accelerationSigmaY, self.accelerationCorrCoeff, self.possibleNbOfContourPoints))
        for i0 in range(self.possibleNbOfContourPoints):
            assert self.contourPoints[i0]._get_packed_fingerprint() == ZcmLidarScalaContourPoint._get_packed_fingerprint()
            self.contourPoints[i0]._encode_one(buf)

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmLidarScalaFilteredObjectAttributes._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmLidarScalaFilteredObjectAttributes._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmLidarScalaFilteredObjectAttributes()
        self.objectAge, self.hiddenStatusAge, self.dynamicFlagState, self.dynamicFlagProperty, self.relativeTimeOfMeasure, self.positionClosestObjectPointX, self.positionClosestObjectPointY, self.relativeVelocityX, self.relativeVelocityY, self.relativeVelocitySigmaX, self.relativeVelocitySigmaY, self.classification, self.classificationQuality, self.classificationAge, self.objectBoxSizeX, self.objectBoxSizeY, self.objectBoxSizeSigmaX, self.objectBoxSizeSigmaY, self.objectBoxOrientation, self.objectBoxOrientationSigma, self.objectBoxHeight, self.referencePointLocation, self.referencePointCoordX, self.referencePointCoordY, self.referencePointCoordSigmaX, self.referencePointCoordSigmaY, self.referencePointPositionCorrCoeff, self.existenceProbaility, self.absoluteVelocityX, self.absoluteVelocityY, self.absoluteVelocitySigmaX, self.absoluteVelocitySigmaY, self.velocityCorrCoeff, self.accelerationX, self.accelerationY, self.accelerationSigmaX, self.accelerationSigmaY, self.accelerationCorrCoeff, self.possibleNbOfContourPoints = struct.unpack(">iibbiffffffhhifffffffhffffhfffffhffffhh", buf.read(136))
        self.contourPoints = []
        for i0 in range(self.possibleNbOfContourPoints):
            self.contourPoints.append(ZcmLidarScalaContourPoint._decode_one(buf))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmLidarScalaFilteredObjectAttributes in parents: return 0
        newparents = parents + [ZcmLidarScalaFilteredObjectAttributes]
        tmphash = (0x4c13b2dce2c8503a+ ZcmLidarScalaContourPoint._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmLidarScalaFilteredObjectAttributes._packed_fingerprint is None:
            ZcmLidarScalaFilteredObjectAttributes._packed_fingerprint = struct.pack(">Q", ZcmLidarScalaFilteredObjectAttributes._get_hash_recursive([]))
        return ZcmLidarScalaFilteredObjectAttributes._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

