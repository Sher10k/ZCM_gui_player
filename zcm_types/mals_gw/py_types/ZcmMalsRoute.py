"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmMalsSwitch import ZcmMalsSwitch

from ZcmService import ZcmService

class ZcmMalsRoute(object):
    __slots__ = ["service", "count", "switches", "current_section", "border1", "border2"]

    SWITCH_STATE_UNKNOWN = 0
    SWITCH_STATE_PLUS = 1
    SWITCH_STATE_MINUS = 2

    def __init__(self):
        self.service = ZcmService()
        self.count = 0
        self.switches = []
        self.current_section = ""
        self.border1 = ""
        self.border2 = ""

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmMalsRoute._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        buf.write(struct.pack(">h", self.count))
        for i0 in range(self.count):
            assert self.switches[i0]._get_packed_fingerprint() == ZcmMalsSwitch._get_packed_fingerprint()
            self.switches[i0]._encode_one(buf)
        __current_section_encoded = self.current_section.encode('utf-8')
        buf.write(struct.pack('>I', len(__current_section_encoded)+1))
        buf.write(__current_section_encoded)
        buf.write(b"\0")
        __border1_encoded = self.border1.encode('utf-8')
        buf.write(struct.pack('>I', len(__border1_encoded)+1))
        buf.write(__border1_encoded)
        buf.write(b"\0")
        __border2_encoded = self.border2.encode('utf-8')
        buf.write(struct.pack('>I', len(__border2_encoded)+1))
        buf.write(__border2_encoded)
        buf.write(b"\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmMalsRoute._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmMalsRoute._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmMalsRoute()
        self.service = ZcmService._decode_one(buf)
        self.count = struct.unpack(">h", buf.read(2))[0]
        self.switches = []
        for i0 in range(self.count):
            self.switches.append(ZcmMalsSwitch._decode_one(buf))
        __current_section_len = struct.unpack('>I', buf.read(4))[0]
        self.current_section = buf.read(__current_section_len)[:-1].decode('utf-8', 'replace')
        __border1_len = struct.unpack('>I', buf.read(4))[0]
        self.border1 = buf.read(__border1_len)[:-1].decode('utf-8', 'replace')
        __border2_len = struct.unpack('>I', buf.read(4))[0]
        self.border2 = buf.read(__border2_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmMalsRoute in parents: return 0
        newparents = parents + [ZcmMalsRoute]
        tmphash = (0xf2d4274b0fa6d7fd+ ZcmService._get_hash_recursive(newparents)+ ZcmMalsSwitch._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmMalsRoute._packed_fingerprint is None:
            ZcmMalsRoute._packed_fingerprint = struct.pack(">Q", ZcmMalsRoute._get_hash_recursive([]))
        return ZcmMalsRoute._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

