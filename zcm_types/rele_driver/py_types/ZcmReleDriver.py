"""ZCM type definitions
This file automatically generated by zcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

from ZcmService import ZcmService

class ZcmReleDriver(object):
    __slots__ = ["service", "rele_name", "rele_is_on"]

    def __init__(self):
        self.service = ZcmService()
        self.rele_name = ""
        self.rele_is_on = False

    def encode(self):
        buf = BytesIO()
        buf.write(ZcmReleDriver._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        assert self.service._get_packed_fingerprint() == ZcmService._get_packed_fingerprint()
        self.service._encode_one(buf)
        __rele_name_encoded = self.rele_name.encode('utf-8')
        buf.write(struct.pack('>I', len(__rele_name_encoded)+1))
        buf.write(__rele_name_encoded)
        buf.write(b"\0")
        buf.write(struct.pack(">b", self.rele_is_on))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != ZcmReleDriver._get_packed_fingerprint():
            raise ValueError("Decode error")
        return ZcmReleDriver._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = ZcmReleDriver()
        self.service = ZcmService._decode_one(buf)
        __rele_name_len = struct.unpack('>I', buf.read(4))[0]
        self.rele_name = buf.read(__rele_name_len)[:-1].decode('utf-8', 'replace')
        self.rele_is_on = bool(struct.unpack('b', buf.read(1))[0])
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if ZcmReleDriver in parents: return 0
        newparents = parents + [ZcmReleDriver]
        tmphash = (0xfe0b38538632c848+ ZcmService._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + ((tmphash>>63)&0x1)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if ZcmReleDriver._packed_fingerprint is None:
            ZcmReleDriver._packed_fingerprint = struct.pack(">Q", ZcmReleDriver._get_hash_recursive([]))
        return ZcmReleDriver._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

